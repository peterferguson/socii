/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from "./models"
import { JournalJNLC } from "./journalJNLC"
import { JournalJNLS } from "./journalJNLS"

export class JournalResource {
  /**
   * journal ID
   */
  "id": string
  /**
   * JNLS (constant)
   */
  "entryType": string
  /**
   * account ID the shares go from
   */
  "fromAccount": string
  /**
   * account ID the shares go to
   */
  "toAccount": string
  /**
   * ID the amount goes to
   */
  "description"?: string
  "settleDate": string | null
  "status"?: JournalResource.StatusEnum
  "netAmount": string
  /**
   * max 255 characters
   */
  "transmitterName"?: string
  /**
   * max 255 characters
   */
  "transmitterAccountNumber"?: string
  /**
   * max 255 characters
   */
  "transmitterAddress"?: string
  /**
   * max 255 characters
   */
  "transmitterFinancialInstitution"?: string
  "transmitterTimestamp"?: Date
  "symbol": string
  "qty": string
  "price": string

  static discriminator: string | undefined = "entryType"

  static attributeTypeMap: Array<{ name: string; baseName: string; type: string }> = [
    {
      name: "id",
      baseName: "id",
      type: "string",
    },
    {
      name: "entryType",
      baseName: "entry_type",
      type: "string",
    },
    {
      name: "fromAccount",
      baseName: "from_account",
      type: "string",
    },
    {
      name: "toAccount",
      baseName: "to_account",
      type: "string",
    },
    {
      name: "description",
      baseName: "description",
      type: "string",
    },
    {
      name: "settleDate",
      baseName: "settle_date",
      type: "string",
    },
    {
      name: "status",
      baseName: "status",
      type: "JournalResource.StatusEnum",
    },
    {
      name: "netAmount",
      baseName: "net_amount",
      type: "string",
    },
    {
      name: "transmitterName",
      baseName: "transmitter_name",
      type: "string",
    },
    {
      name: "transmitterAccountNumber",
      baseName: "transmitter_account_number",
      type: "string",
    },
    {
      name: "transmitterAddress",
      baseName: "transmitter_address",
      type: "string",
    },
    {
      name: "transmitterFinancialInstitution",
      baseName: "transmitter_financial_institution",
      type: "string",
    },
    {
      name: "transmitterTimestamp",
      baseName: "transmitter_timestamp",
      type: "Date",
    },
    {
      name: "symbol",
      baseName: "symbol",
      type: "string",
    },
    {
      name: "qty",
      baseName: "qty",
      type: "string",
    },
    {
      name: "price",
      baseName: "price",
      type: "string",
    },
  ]

  static from(json) {
    // - convert baseName to name
    for (const { baseName, name } of this.attributeTypeMap) {
      if (baseName !== name) {
        Object.assign(json, { [name]: json[baseName] })
        delete json[baseName]
      }
    }
    return Object.assign(new this(), json)
  }

  static getAttributeTypeMap() {
    return JournalResource.attributeTypeMap
  }
}

export namespace JournalResource {
  export enum StatusEnum {
    Pending = <any>"pending",
    Canceled = <any>"canceled",
    Executed = <any>"executed",
    Queued = <any>"queued",
    Rejected = <any>"rejected",
    Deleted = <any>"deleted",
  }
}
