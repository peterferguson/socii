/* tslint:disable */
/* eslint-disable */
/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CreateOrderStopLoss,
    CreateOrderStopLossFromJSON,
    CreateOrderStopLossFromJSONTyped,
    CreateOrderStopLossToJSON,
    CreateOrderTakeProfit,
    CreateOrderTakeProfitFromJSON,
    CreateOrderTakeProfitFromJSONTyped,
    CreateOrderTakeProfitToJSON,
} from './';

/**
 * 
 * @export
 * @interface CreateOrder
 */
export interface CreateOrder {
    /**
     * 
     * @type {string}
     * @memberof CreateOrder
     */
    symbol: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrder
     */
    qty?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrder
     */
    notional?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrder
     */
    side: CreateOrderSideEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateOrder
     */
    type: CreateOrderTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateOrder
     */
    timeInForce: CreateOrderTimeInForceEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateOrder
     */
    limitPrice?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrder
     */
    stopPrice?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrder
     */
    trailPrice?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrder
     */
    trailPercent?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateOrder
     */
    extendedHours?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateOrder
     */
    clientOrderId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrder
     */
    orderClass?: CreateOrderOrderClassEnum;
    /**
     * 
     * @type {CreateOrderTakeProfit}
     * @memberof CreateOrder
     */
    takeProfit?: CreateOrderTakeProfit;
    /**
     * 
     * @type {CreateOrderStopLoss}
     * @memberof CreateOrder
     */
    stopLoss?: CreateOrderStopLoss;
    /**
     * 
     * @type {string}
     * @memberof CreateOrder
     */
    commission?: string;
}

/**
* @export
* @enum {string}
*/
export enum CreateOrderSideEnum {
    Buy = 'buy',
    Sell = 'sell'
}/**
* @export
* @enum {string}
*/
export enum CreateOrderTypeEnum {
    Market = 'market',
    Limit = 'limit',
    Stop = 'stop',
    StopLimit = 'stop_limit',
    TrailingStop = 'trailing_stop'
}/**
* @export
* @enum {string}
*/
export enum CreateOrderTimeInForceEnum {
    Day = 'day',
    Gtc = 'gtc',
    Opg = 'opg',
    Cls = 'cls',
    Ioc = 'ioc',
    Fok = 'fok'
}/**
* @export
* @enum {string}
*/
export enum CreateOrderOrderClassEnum {
    Simple = 'simple',
    Bracket = 'bracket',
    Oco = 'oco',
    Oto = 'oto'
}

export function CreateOrderFromJSON(json: any): CreateOrder {
    return CreateOrderFromJSONTyped(json, false);
}

export function CreateOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOrder {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'symbol': json['symbol'],
        'qty': !exists(json, 'qty') ? undefined : json['qty'],
        'notional': !exists(json, 'notional') ? undefined : json['notional'],
        'side': json['side'],
        'type': json['type'],
        'timeInForce': json['time_in_force'],
        'limitPrice': !exists(json, 'limit_price') ? undefined : json['limit_price'],
        'stopPrice': !exists(json, 'stop_price') ? undefined : json['stop_price'],
        'trailPrice': !exists(json, 'trail_price') ? undefined : json['trail_price'],
        'trailPercent': !exists(json, 'trail_percent') ? undefined : json['trail_percent'],
        'extendedHours': !exists(json, 'extended_hours') ? undefined : json['extended_hours'],
        'clientOrderId': !exists(json, 'client_order_id') ? undefined : json['client_order_id'],
        'orderClass': !exists(json, 'order_class') ? undefined : json['order_class'],
        'takeProfit': !exists(json, 'take_profit') ? undefined : CreateOrderTakeProfitFromJSON(json['take_profit']),
        'stopLoss': !exists(json, 'stop_loss') ? undefined : CreateOrderStopLossFromJSON(json['stop_loss']),
        'commission': !exists(json, 'commission') ? undefined : json['commission'],
    };
}

export function CreateOrderToJSON(value?: CreateOrder | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'symbol': value.symbol,
        'qty': value.qty,
        'notional': value.notional,
        'side': value.side,
        'type': value.type,
        'time_in_force': value.timeInForce,
        'limit_price': value.limitPrice,
        'stop_price': value.stopPrice,
        'trail_price': value.trailPrice,
        'trail_percent': value.trailPercent,
        'extended_hours': value.extendedHours,
        'client_order_id': value.clientOrderId,
        'order_class': value.orderClass,
        'take_profit': CreateOrderTakeProfitToJSON(value.takeProfit),
        'stop_loss': CreateOrderStopLossToJSON(value.stopLoss),
        'commission': value.commission,
    };
}


