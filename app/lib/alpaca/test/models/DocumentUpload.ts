/* tslint:disable */
/* eslint-disable */
/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DocumentType,
    DocumentTypeFromJSON,
    DocumentTypeFromJSONTyped,
    DocumentTypeToJSON,
} from './';

/**
 * If an account has documents after the submission, it has
 * the Document model in exchange with DocumentUpload.
 * @export
 * @interface DocumentUpload
 */
export interface DocumentUpload {
    /**
     * 
     * @type {DocumentType}
     * @memberof DocumentUpload
     */
    documentType: DocumentType;
    /**
     * 
     * @type {string}
     * @memberof DocumentUpload
     */
    documentSubType?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentUpload
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentUpload
     */
    mimeType: string;
}

export function DocumentUploadFromJSON(json: any): DocumentUpload {
    return DocumentUploadFromJSONTyped(json, false);
}

export function DocumentUploadFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentUpload {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'documentType': DocumentTypeFromJSON(json['document_type']),
        'documentSubType': !exists(json, 'document_sub_type') ? undefined : json['document_sub_type'],
        'content': json['content'],
        'mimeType': json['mime_type'],
    };
}

export function DocumentUploadToJSON(value?: DocumentUpload | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'document_type': DocumentTypeToJSON(value.documentType),
        'document_sub_type': value.documentSubType,
        'content': value.content,
        'mime_type': value.mimeType,
    };
}


