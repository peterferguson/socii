/* tslint:disable */
/* eslint-disable */
/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse2003,
    InlineResponse2003FromJSON,
    InlineResponse2003ToJSON,
} from '../models';

export interface AccountsAccountIdDocumentsDocumentIdDownloadGetRequest {
    accountId: string;
    documentId: string;
}

export interface AccountsAccountIdDocumentsGetRequest {
    accountId: string;
    startDate?: Date;
    endDate?: Date;
}

export interface DocumentsDocumentIdGetRequest {
    documentId: string;
}

/**
 * 
 */
export class DocumentsApi extends runtime.BaseAPI {

    /**
     * The operation returns a pre-signed downloadable link as a redirect with HTTP status code 301 if one is found. 
     * Download a document file that belongs to an account.
     */
    async accountsAccountIdDocumentsDocumentIdDownloadGetRaw(requestParameters: AccountsAccountIdDocumentsDocumentIdDownloadGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling accountsAccountIdDocumentsDocumentIdDownloadGet.');
        }

        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling accountsAccountIdDocumentsDocumentIdDownloadGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/accounts/{account_id}/documents/{document_id}/download`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The operation returns a pre-signed downloadable link as a redirect with HTTP status code 301 if one is found. 
     * Download a document file that belongs to an account.
     */
    async accountsAccountIdDocumentsDocumentIdDownloadGet(requestParameters: AccountsAccountIdDocumentsDocumentIdDownloadGetRequest): Promise<void> {
        await this.accountsAccountIdDocumentsDocumentIdDownloadGetRaw(requestParameters);
    }

    /**
     * You can query account documents such as monthly  statements and trade confirms under an account. 
     * Return a list of account documents.
     */
    async accountsAccountIdDocumentsGetRaw(requestParameters: AccountsAccountIdDocumentsGetRequest): Promise<runtime.ApiResponse<Array<InlineResponse2003>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling accountsAccountIdDocumentsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['start_date'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['end_date'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/accounts/{account_id}/documents`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InlineResponse2003FromJSON));
    }

    /**
     * You can query account documents such as monthly  statements and trade confirms under an account. 
     * Return a list of account documents.
     */
    async accountsAccountIdDocumentsGet(requestParameters: AccountsAccountIdDocumentsGetRequest): Promise<Array<InlineResponse2003>> {
        const response = await this.accountsAccountIdDocumentsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * The operation returns a pre-signed downloadable link as a redirect with HTTP status code 301 if one is found. 
     * Download a document file directly
     */
    async documentsDocumentIdGetRaw(requestParameters: DocumentsDocumentIdGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling documentsDocumentIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/documents/{document_id}`.replace(`{${"document_id"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The operation returns a pre-signed downloadable link as a redirect with HTTP status code 301 if one is found. 
     * Download a document file directly
     */
    async documentsDocumentIdGet(requestParameters: DocumentsDocumentIdGetRequest): Promise<void> {
        await this.documentsDocumentIdGetRaw(requestParameters);
    }

}
