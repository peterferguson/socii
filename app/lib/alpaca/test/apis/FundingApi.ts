/* tslint:disable */
/* eslint-disable */
/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ACHRelationshipData,
    ACHRelationshipDataFromJSON,
    ACHRelationshipDataToJSON,
    ACHRelationshipResource,
    ACHRelationshipResourceFromJSON,
    ACHRelationshipResourceToJSON,
    BankData,
    BankDataFromJSON,
    BankDataToJSON,
    BankResource,
    BankResourceFromJSON,
    BankResourceToJSON,
    TransferData,
    TransferDataFromJSON,
    TransferDataToJSON,
    TransferResource,
    TransferResourceFromJSON,
    TransferResourceToJSON,
} from '../models';

export interface DeleteAchRelationshipRequest {
    accountId: string;
    achRelationshipId: string;
}

export interface DeleteRecipientBankRequest {
    accountId: string;
    bankId: string;
}

export interface DeleteTransferRequest {
    accountId: string;
    transferId: string;
}

export interface GetAchRelationshipsRequest {
    accountId: string;
    statuses?: string;
}

export interface GetRecipientBanksRequest {
    accountId: string;
    status?: string;
    bankName?: string;
}

export interface GetTransfersRequest {
    accountId: string;
    direction?: GetTransfersDirectionEnum;
    limit?: number;
    offset?: number;
}

export interface PostAchRelationshipsRequest {
    accountId: string;
    aCHRelationshipData: ACHRelationshipData;
}

export interface PostRecipientBanksRequest {
    accountId: string;
    bankData: BankData;
}

export interface PostTransfersRequest {
    accountId: string;
    transferData: TransferData;
}

/**
 * 
 */
export class FundingApi extends runtime.BaseAPI {

    /**
     * Delete an existing ACH relationship
     */
    async deleteAchRelationshipRaw(requestParameters: DeleteAchRelationshipRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteAchRelationship.');
        }

        if (requestParameters.achRelationshipId === null || requestParameters.achRelationshipId === undefined) {
            throw new runtime.RequiredError('achRelationshipId','Required parameter requestParameters.achRelationshipId was null or undefined when calling deleteAchRelationship.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/accounts/{account_id}/ach_relationships/{ach_relationship_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"ach_relationship_id"}}`, encodeURIComponent(String(requestParameters.achRelationshipId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an existing ACH relationship
     */
    async deleteAchRelationship(requestParameters: DeleteAchRelationshipRequest): Promise<void> {
        await this.deleteAchRelationshipRaw(requestParameters);
    }

    /**
     * Delete a Bank Relationship for an account
     */
    async deleteRecipientBankRaw(requestParameters: DeleteRecipientBankRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteRecipientBank.');
        }

        if (requestParameters.bankId === null || requestParameters.bankId === undefined) {
            throw new runtime.RequiredError('bankId','Required parameter requestParameters.bankId was null or undefined when calling deleteRecipientBank.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/accounts/{account_id}/recipient_banks/{bank_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"bank_id"}}`, encodeURIComponent(String(requestParameters.bankId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a Bank Relationship for an account
     */
    async deleteRecipientBank(requestParameters: DeleteRecipientBankRequest): Promise<void> {
        await this.deleteRecipientBankRaw(requestParameters);
    }

    /**
     * Request to close a transfer
     */
    async deleteTransferRaw(requestParameters: DeleteTransferRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteTransfer.');
        }

        if (requestParameters.transferId === null || requestParameters.transferId === undefined) {
            throw new runtime.RequiredError('transferId','Required parameter requestParameters.transferId was null or undefined when calling deleteTransfer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/accounts/{account_id}/transfers/{transfer_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"transfer_id"}}`, encodeURIComponent(String(requestParameters.transferId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request to close a transfer
     */
    async deleteTransfer(requestParameters: DeleteTransferRequest): Promise<void> {
        await this.deleteTransferRaw(requestParameters);
    }

    /**
     * Retrieve ACH Relationships for an account
     */
    async getAchRelationshipsRaw(requestParameters: GetAchRelationshipsRequest): Promise<runtime.ApiResponse<Array<ACHRelationshipResource>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAchRelationships.');
        }

        const queryParameters: any = {};

        if (requestParameters.statuses !== undefined) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/accounts/{account_id}/ach_relationships`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ACHRelationshipResourceFromJSON));
    }

    /**
     * Retrieve ACH Relationships for an account
     */
    async getAchRelationships(requestParameters: GetAchRelationshipsRequest): Promise<Array<ACHRelationshipResource>> {
        const response = await this.getAchRelationshipsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve bank relationships for an account
     */
    async getRecipientBanksRaw(requestParameters: GetRecipientBanksRequest): Promise<runtime.ApiResponse<Array<BankResource>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getRecipientBanks.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.bankName !== undefined) {
            queryParameters['bank_name'] = requestParameters.bankName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/accounts/{account_id}/recipient_banks`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BankResourceFromJSON));
    }

    /**
     * Retrieve bank relationships for an account
     */
    async getRecipientBanks(requestParameters: GetRecipientBanksRequest): Promise<Array<BankResource>> {
        const response = await this.getRecipientBanksRaw(requestParameters);
        return await response.value();
    }

    /**
     * You can filter requested transfers by values such as direction and status. 
     * Return a list of transfers for an account.
     */
    async getTransfersRaw(requestParameters: GetTransfersRequest): Promise<runtime.ApiResponse<Array<TransferResource>>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getTransfers.');
        }

        const queryParameters: any = {};

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/accounts/{account_id}/transfers`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransferResourceFromJSON));
    }

    /**
     * You can filter requested transfers by values such as direction and status. 
     * Return a list of transfers for an account.
     */
    async getTransfers(requestParameters: GetTransfersRequest): Promise<Array<TransferResource>> {
        const response = await this.getTransfersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create an ACH Relationship
     */
    async postAchRelationshipsRaw(requestParameters: PostAchRelationshipsRequest): Promise<runtime.ApiResponse<ACHRelationshipResource>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling postAchRelationships.');
        }

        if (requestParameters.aCHRelationshipData === null || requestParameters.aCHRelationshipData === undefined) {
            throw new runtime.RequiredError('aCHRelationshipData','Required parameter requestParameters.aCHRelationshipData was null or undefined when calling postAchRelationships.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/accounts/{account_id}/ach_relationships`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ACHRelationshipDataToJSON(requestParameters.aCHRelationshipData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ACHRelationshipResourceFromJSON(jsonValue));
    }

    /**
     * Create an ACH Relationship
     */
    async postAchRelationships(requestParameters: PostAchRelationshipsRequest): Promise<ACHRelationshipResource> {
        const response = await this.postAchRelationshipsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a Bank Relationship for an account
     */
    async postRecipientBanksRaw(requestParameters: PostRecipientBanksRequest): Promise<runtime.ApiResponse<BankResource>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling postRecipientBanks.');
        }

        if (requestParameters.bankData === null || requestParameters.bankData === undefined) {
            throw new runtime.RequiredError('bankData','Required parameter requestParameters.bankData was null or undefined when calling postRecipientBanks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/accounts/{account_id}/recipient_banks`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankDataToJSON(requestParameters.bankData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BankResourceFromJSON(jsonValue));
    }

    /**
     * Create a Bank Relationship for an account
     */
    async postRecipientBanks(requestParameters: PostRecipientBanksRequest): Promise<BankResource> {
        const response = await this.postRecipientBanksRaw(requestParameters);
        return await response.value();
    }

    /**
     * This operation allows you to fund an account with virtual money in the sandbox environment. 
     * Request a new transfer
     */
    async postTransfersRaw(requestParameters: PostTransfersRequest): Promise<runtime.ApiResponse<TransferResource>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling postTransfers.');
        }

        if (requestParameters.transferData === null || requestParameters.transferData === undefined) {
            throw new runtime.RequiredError('transferData','Required parameter requestParameters.transferData was null or undefined when calling postTransfers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/accounts/{account_id}/transfers`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferDataToJSON(requestParameters.transferData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferResourceFromJSON(jsonValue));
    }

    /**
     * This operation allows you to fund an account with virtual money in the sandbox environment. 
     * Request a new transfer
     */
    async postTransfers(requestParameters: PostTransfersRequest): Promise<TransferResource> {
        const response = await this.postTransfersRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetTransfersDirectionEnum {
    Incoming = 'INCOMING',
    Outgoing = 'OUTGOING'
}
