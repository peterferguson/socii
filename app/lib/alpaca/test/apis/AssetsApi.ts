/* tslint:disable */
/* eslint-disable */
/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime"
import { AssetResource, AssetResourceFromJSON, AssetResourceToJSON } from "../models"

export interface AssetsAssetIdGetRequest {
  assetId: string
}

export interface AssetsSymbolGetRequest {
  symbol: string
}

/**
 *
 */
export class AssetsApi extends runtime.BaseAPI {
  /**
   * Returns the requested asset, if found
   * Retrieve an asset by UUID
   */
  async assetsAssetIdGetRaw(
    requestParameters: AssetsAssetIdGetRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
      throw new runtime.RequiredError(
        "assetId",
        "Required parameter requestParameters.assetId was null or undefined when calling assetsAssetIdGet."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password)
    }
    const response = await this.request({
      path: `/assets/{asset_id}`.replace(
        `{${"asset_id"}}`,
        encodeURIComponent(String(requestParameters.assetId))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Returns the requested asset, if found
   * Retrieve an asset by UUID
   */
  async assetsAssetIdGet(requestParameters: AssetsAssetIdGetRequest): Promise<void> {
    await this.assetsAssetIdGetRaw(requestParameters)
  }

  /**
   * Returns the requested asset, if found
   * Retrieve an asset by symbol
   */
  async assetsSymbolGetRaw(
    requestParameters: AssetsSymbolGetRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.symbol === null || requestParameters.symbol === undefined) {
      throw new runtime.RequiredError(
        "symbol",
        "Required parameter requestParameters.symbol was null or undefined when calling assetsSymbolGet."
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password)
    }
    const response = await this.request({
      path: `/assets/{symbol}`.replace(
        `{${"symbol"}}`,
        encodeURIComponent(String(requestParameters.symbol))
      ),
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Returns the requested asset, if found
   * Retrieve an asset by symbol
   */
  async assetsSymbolGet(requestParameters: AssetsSymbolGetRequest): Promise<void> {
    await this.assetsSymbolGetRaw(requestParameters)
  }

  /**
   * Returns all assets
   * Retrieve all assets
   */
  async getAssetsRaw(): Promise<runtime.ApiResponse<Array<AssetResource>>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " + btoa(this.configuration.username + ":" + this.configuration.password)
    }
    const response = await this.request({
      path: `/assets`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(AssetResourceFromJSON)
    )
  }

  /**
   * Returns all assets
   * Retrieve all assets
   */
  async getAssets(): Promise<Array<AssetResource>> {
    const response = await this.getAssetsRaw()
    return await response.value()
  }
}
