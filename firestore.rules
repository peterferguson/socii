rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if
          request.time < timestamp.date(2021, 4, 30);
        
      match /users/{userId} {
      	allow read;
        allow create: if isValidUser(userId);
      }
      
      match /usernames/{username} {
      	allow read;
        allow create: if isValidUsername(username);
      }
      
      match /groups/{groupId} {
        allow read, create: if request.time < timestamp.date(2021, 4, 30);

          // Explicitly define rules for the 'trades' subcollection
          // TODO: Create function to choose who can update these rather than anyone as below
          // TODO: ... see canCreatePost in https://github.com/fireship-io/next-firebase-course/blob/4fab05128a2ae5e9c6d51557922642e7daa41260/firestore.rules
          // * Trades ledger
          match /trades/{tradeId} {
            allow read, create: if request.auth != null && request.auth.uid == userId;
            allow delete: if false;
            allow update: if false;
          }
          // TODO Add requirements that the assetRef exists, price > 0 & shares > 0
          
          // Explicitly define rules for the 'holdings' subcollection
          match /holdings/{assetId} {
            allow read, update, create: if request.auth != null && request.auth.uid == userId;
            allow delete: if false;
          }
      }

      match /users/{userId} {
        allow read, create: if request.time < timestamp.date(2021, 4, 30);

        match /invites/{referralCode} {
          allow read, update, create: if request.auth != null && request.auth.uid == userId;
          allow delete: if false;
        }
      }

      // // * Payment ledger
      // match /payments/{payments} {
        
      //   // Replace with checks on the count and the user id
      //   allow create: if request.auth != null 
      //                 && request.auth.uid == userId 
      //                 && request.resource.data.count > 0;
      //   allow update: if false;
      //   allow delete: if false;

      // Users

      function isValidUser(userId) {
        let isOwner = request.auth.uid == userId;
        let username = request.resource.data.username;
        let createdValidUsername = existsAfter(/databases/$(database)/documents/usernames/$(username));
        
        return isOwner && createdValidUsername;
      }
      
      function isValidUsername(username) {
        let isOwner = request.auth.uid == request.resource.data.uid;
        let isValidLength = username.size() >= 3 && username.size() <= 15;
        let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        
        return isOwner && isValidLength && isValidUserDoc;     
      }

    }
  }
}
