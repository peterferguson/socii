rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {

      /* Tickers */
      match /tickers/{ISIN} {
      	allow read;
        allow write: if false;
        
      }

      match /tickers/{ISIN}/data/{serviceId} {
        allow read;
        allow write: if false;
      }
      
      match /tickers/{ISIN}/timeseries/{ts} {
        allow read;
        allow write: if false;
      }

      /* Users */
      match /users/{userId} {
      	allow read;
        allow create: if authenticated();
        allow delete: if isValidUser(userId);
        allow update: if isValidUser(userId);
      }

      match /users/{userId}/invites/{referralCode} {
          allow read, update, create: if authenticated() && isOwner(userId);
          allow delete: if false;
        }
      
      match /users/{userId}/stream/{token} {
          allow read: if authenticated() && isOwner(userId);
          allow write: if false;
        }
      
      match /usernames/{username} {
      	allow read;
        allow create: if isValidUsername(username);
        allow delete: if isValidUsername(username);
        allow update: if isValidUsername(username);
      }

      /* Groups */
      match /groups/{groupName} {
        allow read, create:  if authenticated();
        allow update: if isGroupMember(groupName);

      }
      match /groups/{groupName}/investors/{username} {
        allow read, update: if isGroupMember(groupName);
        allow create: if isValidUser(request.auth.uid);
      }

      match /groups/{groupName}/trades/{tradeId} {
        allow read, create: if authenticated() && isGroupMember(groupName);
        allow delete: if false;
        allow update: if false;
      }
    
      match /groups/{groupName}/holdings/{assetId} {
        allow read: if isGroupMember(groupName);
        allow write: if false;
      }

      match /tradesEvents/{eventId}{
      	allow read: if authenticated() && matchingAlpacaAccountId(resource.data.accountId);
      	allow write: if false;
      }
      match /accountsEvents/{eventId}{
      	allow read: if authenticated() && matchingAlpacaAccountId(resource.data.accountId);
      	allow write: if false;
      }
      match /transfersEvents/{eventId}{
      	allow read: if authenticated() && matchingAlpacaAccountId(resource.data.accountId);
      	allow write: if false;
      }
      match /nonTradingActivityEvents/{eventId}{
      	allow read: if authenticated() && matchingAlpacaAccountId(resource.data.accountId);
      	allow write: if false;
      }
      match /journalsEvents/{eventId}{
      	allow read, write: if false;
      }

			match /marketCalendar/{date} {
      	allow read;
        allow write;
        }

      /* Collection Groups */
      match /data/{serviceId} {
        allow read;
        allow update: if authenticated();
        allow create: if authenticated();
      }
      match /funding/{fundsId} {
        allow read;
        allow write: if false;
      }

      /* Helper functions */

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function authenticated() {
        return request.auth != null; 
      }

      function isValidUser(userId) {
        let username = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username;
        let createdValidUsername = existsAfter(/databases/$(database)/documents/usernames/$(username));

        return isOwner(userId) && createdValidUsername;
      }
      
      function isValidUsername(username) {
        let isValidLength = username.size() >= 3 && username.size() <= 15;
        let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid));
        let sameUsername = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        
        return isValidLength && isValidUserDoc && sameUsername;
      }

      function isGroupMember(groupName) {
        let username = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username;
        let investorExists = exists(/databases/$(database)/documents/groups/$(groupName)/investors/$(username));
        
        return investorExists;
      }

      function matchingAlpacaAccountId(accountId) {
        let alpacaAccountId = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.alpacaAccountId;

        return alpacaAccountId == accountId;
      }

    }
  }
}

