# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-07-07T21:55:57+00:00

from __future__ import annotations

from datetime import date, datetime
from decimal import Decimal
from enum import Enum
from ipaddress import IPv4Address
from typing import Any, Mapping, Optional, Sequence, Union
from uuid import UUID

from pydantic import BaseModel, EmailStr, Field, constr


class AccountStatus(Enum):
    """
    - **SUBMITTED**
    The application has been submitted and in process.
    - **ACTION_REQUIRED**
    The application requires manual action.
    - **APPROVAL_PENDING**
    Initial value. The application approval process is in process.
    - **APPROVED**
    The account application has been approved, and waiting to be ACTIVE
    - **REJECTED**
    The account application is rejected for some reason
    - **ACTIVE**
    The account is fully active. Trading and funding are processed under this status.
    - **DISABLED**
    The account is disabled after ACTIVE status.
    - **ACCOUNT_CLOSED**
    The account is closed.

    """

    SUBMITTED = 'SUBMITTED'
    ACTION_REQUIRED = 'ACTION_REQUIRED'
    APPROVAL_PENDING = 'APPROVAL_PENDING'
    APPROVED = 'APPROVED'
    REJECTED = 'REJECTED'
    ACTIVE = 'ACTIVE'
    DISABLED = 'DISABLED'
    ACCOUNT_CLOSED = 'ACCOUNT_CLOSED'


class ActivityType(Enum):
    FILL = 'FILL'
    ACATC = 'ACATC'
    ACATS = 'ACATS'
    CSD = 'CSD'
    CSR = 'CSR'
    CSW = 'CSW'
    DIV = 'DIV'
    DIVCGL = 'DIVCGL'
    DIVCGS = 'DIVCGS'
    DIVNRA = 'DIVNRA'
    DIVROC = 'DIVROC'
    DIVTXEX = 'DIVTXEX'
    INT = 'INT'
    JNLC = 'JNLC'
    JNLS = 'JNLS'
    MA = 'MA'
    NC = 'NC'
    PTC = 'PTC'
    REORG = 'REORG'
    SSO = 'SSO'
    SSP = 'SSP'


class Activity(BaseModel):
    """
    Base for activity types
    """

    id: Optional[UUID] = Field(
        None, example='20210510100104650::88b5f678-fef5-447b-af15-f21e367e6d8c'
    )
    account_id: Optional[UUID] = Field(
        None, example='c8f1ef5d-edc0-4f23-9ee4-378f19cb92a4'
    )
    activity_type: Optional[ActivityType] = None


class Type(Enum):
    fill = 'fill'
    partial_fill = 'partial_fill'


class Side(Enum):
    buy = 'buy'
    sell = 'sell'


class OrderStatus(Enum):
    new = 'new'
    partially_filled = 'partially_filled'
    filled = 'filled'
    done_for_day = 'done_for_day'
    canceled = 'canceled'
    expired = 'expired'
    replaced = 'replaced'
    pending_cancel = 'pending_cancel'
    pending_replace = 'pending_replace'
    accepted = 'accepted'
    pending_new = 'pending_new'
    accepted_for_bidding = 'accepted_for_bidding'
    stopped = 'stopped'
    rejected = 'rejected'
    suspended = 'suspended'
    calculated = 'calculated'


class TradeActivity(Activity):
    transaction_time: Optional[str] = Field(None, example='2021-05-10T14:01:04.650275Z')
    type: Optional[Type] = Field(None, example='fill')
    price: Optional[str] = Field(None, example=3.1415)
    qty: Optional[str] = Field(None, example=0.38921)
    side: Optional[Side] = Field(None, example='sell')
    symbol: Optional[str] = Field(None, example='AAPL')
    leaves_qty: Optional[str] = Field(None, example=0.5123)
    order_id: Optional[UUID] = Field(
        None, example='fe060a1b-5b45-4eba-ba46-c3a3345d8255'
    )
    cum_qty: Optional[str] = Field(None, example=0.9723)
    order_status: Optional[OrderStatus] = Field(None, example='filled')


class Status(Enum):
    executed = 'executed'
    correct = 'correct'
    canceled = 'canceled'


class NonTradeActivity(Activity):
    date: Optional[date] = Field(None, example='2021-05-21')
    net_amount: Optional[str] = Field(None, example=1234)
    description: Optional[str] = Field(None, example='Example description')
    status: Optional[Status] = Field(None, example='executed')
    symbol: Optional[str] = Field(None, example='AAPL')
    qty: Optional[str] = Field(None, example=0.38921)
    per_share_amount: Optional[str] = Field(None, example=0.38921)


class ActivityItem(BaseModel):
    __root__: Union[TradeActivity, NonTradeActivity] = Field(..., title='ActivityItem')


class DocumentType(Enum):
    """
        - identity_verification:
      identity verification document
    - address_verification:
      address verification document
    - date_of_birth_verification:
      date of birth verification document
    - tax_id_verification:
      tax ID verification document
    - account_approval_letter:
      407 approval letter
    - cip_result:
      initial CIP result

    """

    identity_verification = 'identity_verification'
    address_verification = 'address_verification'
    date_of_birth_verification = 'date_of_birth_verification'
    tax_id_verification = 'tax_id_verification'
    account_approval_letter = 'account_approval_letter'
    cip_result = 'cip_result'


class StreetAddress(BaseModel):
    __root__: str = Field(..., example='20 N San Mateo Dr')


class Contact(BaseModel):
    """
    Contact is the model for the account owner contact information.

    """

    email_address: Optional[EmailStr] = Field(None, example='john.doe@example.com')
    phone_number: Optional[str] = Field(
        None,
        description='with country code, no hyphen or space',
        example='+15556667788',
    )
    street_address: Optional[Sequence[StreetAddress]] = None
    city: Optional[str] = Field(None, example='San Mateo')
    state: Optional[str] = Field(None, example='CA')
    postal_code: Optional[str] = Field(None, example='94401')


class TaxIdType(Enum):
    USA_SSN = 'USA_SSN'
    AUS_TFN = 'AUS_TFN'
    AUS_ABN = 'AUS_ABN'
    DEU_TAX_ID = 'DEU_TAX_ID'
    FRA_SPI = 'FRA_SPI'
    GBR_UTR = 'GBR_UTR'
    GBR_NINO = 'GBR_NINO'
    HUN_TIN = 'HUN_TIN'
    IND_PAN = 'IND_PAN'
    ISR_TAX_ID = 'ISR_TAX_ID'
    ITA_TAX_ID = 'ITA_TAX_ID'
    JPN_TAX_ID = 'JPN_TAX_ID'
    NLD_TIN = 'NLD_TIN'
    SGP_NRIC = 'SGP_NRIC'
    SGP_FIN = 'SGP_FIN'
    SGP_ASGD = 'SGP_ASGD'
    SGP_ITR = 'SGP_ITR'
    SWE_TAX_ID = 'SWE_TAX_ID'
    NOT_SPECIFIED = 'NOT_SPECIFIED'


class FundingSourceEnum(Enum):
    employment_income = 'employment_income'
    investments = 'investments'
    inheritance = 'inheritance'
    business_income = 'business_income'
    savings = 'savings'
    family = 'family'


class Identity(BaseModel):
    """
    Identity is the model to provide account ownerâ€™s identity information.

    """

    given_name: str = Field(..., example='John')
    family_name: str = Field(..., example='Doe')
    date_of_birth: date = Field(..., example='1990-01-01')
    tax_id: Optional[str] = Field(None, example='666-55-4321')
    tax_id_type: Optional[TaxIdType] = None
    country_of_citizenship: Optional[str] = Field(
        None,
        description='[ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).\n',
        example='USA',
    )
    country_of_birth: Optional[str] = Field(
        None,
        description='[ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).\n',
        example='USA',
    )
    country_of_tax_residence: str = Field(
        ...,
        description='[ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).\n',
        example='USA',
    )
    funding_source: Sequence[FundingSourceEnum]
    annual_income_min: Optional[float] = None
    annual_income_max: Optional[float] = None
    liquid_net_worth_min: Optional[float] = None
    liquid_net_worth_max: Optional[float] = None
    total_net_worth_min: Optional[float] = None
    total_net_worth_max: Optional[float] = None
    extra: Optional[Mapping[str, Any]] = Field(
        None, description='any extra information used for KYC purposes\n'
    )


class EmploymentStatus(Enum):
    unemployed = 'unemployed'
    employed = 'employed'
    student = 'student'
    retired = 'retired'


class Disclosures(BaseModel):
    """
        Disclosures fields denote if the account owner falls under
    each category defined by FINRA rule. The client has to ask
    questions for the end user and the values should reflect
    their answers.
    If one of the answers is true (yes), the account goes into
    ACTION_REQUIRED status.

    """

    employment_status: Optional[EmploymentStatus] = None
    employer_name: Optional[str] = None
    employer_address: Optional[str] = None
    employment_position: Optional[str] = None
    is_control_person: bool
    is_affiliated_exchange_or_finra: bool
    is_politically_exposed: bool
    immediate_family_exposed: bool


class KycResult(BaseModel):
    """
    Hold information about the result of KYC.
    """

    reject: Optional[Mapping[str, Any]] = None
    accept: Optional[Mapping[str, Any]] = None
    indeterminate: Optional[Mapping[str, Any]] = None
    addidional_information: Optional[str] = None


class Agreement1(Enum):
    """
        - margin_agreement: Alpaca Margin Agreement
    - account_agreement: Alpaca Account Agreement
    - customer_agreement: Alpaca Customer Agreement

    """

    margin_agreement = 'margin_agreement'
    account_agreement = 'account_agreement'
    customer_agreement = 'customer_agreement'


class Agreement(BaseModel):
    agreement: Agreement1 = Field(
        ...,
        description='- margin_agreement: Alpaca Margin Agreement\n- account_agreement: Alpaca Account Agreement\n- customer_agreement: Alpaca Customer Agreement\n',
    )
    signed_at: str = Field(..., example='2019-09-11T18:09:33Z')
    ip_address: IPv4Address = Field(..., example='185.13.21.99')


class Agreements(BaseModel):
    """
        The client has to present Alpaca Account Agreement and
    Margin Agreement to the end user, and have them read
    full sentences.

    """

    __root__: Sequence[Agreement] = Field(
        ...,
        description='The client has to present Alpaca Account Agreement and\nMargin Agreement to the end user, and have them read\nfull sentences.\n',
    )


class ApplicationDocument(BaseModel):
    """
        If an account has documents on the application submission,
    it has the ApplicationDocument model in exchange with
    DocumentUpload.

    """

    id: UUID
    document_type: DocumentType
    document_sub_type: Optional[str] = None
    mime_type: str
    created_at: datetime


class DocumentUpload(BaseModel):
    """
        If an account has documents after the submission, it has
    the Document model in exchange with DocumentUpload.

    """

    document_type: DocumentType
    document_sub_type: Optional[str] = Field(None, example='passport')
    content: str = Field(..., example='QWxwYWNhcyBjYW5ub3QgbGl2ZSBhbG9uZS4=')
    mime_type: str = Field(..., example='image/jpeg')


class TrustedContact(BaseModel):
    """
        This model input is optional. However, the client should
    make reasonable effort to obtain the trusted contact information.
    See more details in [FINRA Notice 17-11](https://www.finra.org/sites/default/files/Regulatory-Notice-17-11.pdf)

    """

    given_name: str = Field(..., example='Jane')
    family_name: str = Field(..., example='Doe')
    email_address: Optional[EmailStr] = Field(
        None,
        description='at least one of `email_address`, `phone_number` or\n`street_address` is required\n',
        example='jane.doe@example.com',
    )
    phone_number: Optional[str] = Field(
        None,
        description='at least one of `email_address`, `phone_number` or\n`street_address` is required\n',
    )
    street_address: Optional[Sequence[str]] = Field(
        None,
        description='at least one of `email_address`, `phone_number` or\n`street_address` is required\n',
    )
    city: Optional[str] = Field(
        None, description='required if `street_address` is set\n'
    )
    state: Optional[str] = Field(
        None, description='required if `street_address` is set\n'
    )
    postal_code: Optional[str] = Field(
        None, description='required if `street_address` is set\n'
    )
    country: Optional[str] = Field(
        None,
        description='[ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).\nrequired if `street_address` is set\n',
    )


class AccountExtended(BaseModel):
    id: Optional[UUID] = None
    account_number: Optional[str] = None
    status: Optional[AccountStatus] = None
    currency: Optional[str] = Field(None, description='Always "USD"')
    created_at: Optional[datetime] = None
    last_equity: Optional[Decimal] = None
    kyc_results: Optional[KycResult] = None
    contact: Optional[Contact] = None
    identity: Optional[Identity] = None
    disclosures: Optional[Disclosures] = None
    agreements: Optional[Agreements] = None
    documents: Optional[Sequence[ApplicationDocument]] = None
    trusted_contact: Optional[TrustedContact] = None


class AccountUpdate(BaseModel):
    contact: Optional[Contact] = None
    identity: Optional[Identity] = None
    disclosures: Optional[Disclosures] = None
    trustedContact: Optional[TrustedContact] = None


class Status1(Enum):
    pending = 'pending'
    canceled = 'canceled'
    executed = 'executed'
    queued = 'queued'
    rejected = 'rejected'
    deleted = 'deleted'


class JournalJNLC(BaseModel):
    id: UUID = Field(..., description='journal ID')
    entry_type: str = Field(..., description='JNLC (constant)')
    from_account: UUID = Field(..., description='account ID the amount goes from')
    to_account: UUID
    description: Optional[str] = Field(None, description='ID the amount goes to')
    settle_date: Optional[date] = Field(...)
    status: Optional[Status1] = None
    net_amount: Decimal
    transmitter_name: Optional[str] = Field(None, description='max 255 characters')
    transmitter_account_number: Optional[str] = Field(
        None, description='max 255 characters'
    )
    transmitter_address: Optional[str] = Field(None, description='max 255 characters')
    transmitter_financial_institution: Optional[str] = Field(
        None, description='max 255 characters'
    )
    transmitter_timestamp: Optional[datetime] = None


class Status2(Enum):
    pending = 'pending'
    canceled = 'canceled'
    executed = 'executed'
    queued = 'queued'
    rejected = 'rejected'
    deleted = 'deleted'


class JournalJNLS(BaseModel):
    id: UUID = Field(..., description='journal ID')
    entry_type: str = Field(..., description='JNLS (constant)')
    from_account: UUID = Field(..., description='account ID the shares go from')
    to_account: UUID = Field(..., description='account ID the shares go to')
    settle_date: Optional[date] = Field(...)
    status: Optional[Status2] = None
    symbol: str
    qty: Decimal
    price: Decimal


class AccountCreationObject(BaseModel):
    contact: Optional[Contact] = None
    identity: Optional[Identity] = None
    disclosures: Optional[Disclosures] = None
    agreements: Optional[Agreements] = None
    documents: Optional[Sequence[DocumentUpload]] = None
    trusted_contact: Optional[TrustedContact] = None


class Side1(Enum):
    buy = 'buy'
    sell = 'sell'


class Type1(Enum):
    market = 'market'
    limit = 'limit'
    stop = 'stop'
    stop_limit = 'stop_limit'
    trailing_stop = 'trailing_stop'


class TimeInForce(Enum):
    day = 'day'
    gtc = 'gtc'
    opg = 'opg'
    cls = 'cls'
    ioc = 'ioc'
    fok = 'fok'


class OrderClass(Enum):
    simple = 'simple'
    bracket = 'bracket'
    oco = 'oco'
    oto = 'oto'


class TakeProfit(BaseModel):
    limit_price: Optional[Decimal] = Field(None, example=3.14)


class StopLoss(BaseModel):
    stop_price: Optional[Decimal] = Field(None, example=3.14)
    limit_price: Optional[Decimal] = Field(None, example=3.14)


class CreateOrder(BaseModel):
    symbol: str = Field(..., example='AAPL')
    qty: Optional[Decimal] = Field(None, example=4.124)
    notional: Optional[Decimal] = Field(None, example=3)
    side: Side1 = Field(..., example='buy')
    type: Type1 = Field(..., example='limit')
    time_in_force: TimeInForce = Field(..., example='gtc')
    limit_price: Optional[Decimal] = Field(None, example=3.14)
    stop_price: Optional[Decimal] = Field(None, example=3.14)
    trail_price: Optional[Decimal] = Field(None, example=3.14)
    trail_percent: Optional[Decimal] = Field(None, example=5)
    extended_hours: Optional[bool] = Field(None, example=False)
    client_order_id: Optional[str] = Field(
        None, example='eb9e2aaa-f71a-4f51-b5b4-52a6c565dad4'
    )
    order_class: Optional[OrderClass] = Field(None, example='simple')
    take_profit: Optional[TakeProfit] = None
    stop_loss: Optional[StopLoss] = None
    commission: Optional[Decimal] = Field(None, example=1)


class OrderClass1(Enum):
    simple = 'simple'
    bracket = 'bracket'
    oco = 'oco'
    oto = 'oto'


class OrderType(Enum):
    market = 'market'
    limit = 'limit'
    stop = 'stop'
    stop_limit = 'stop_limit'
    trailing_stop = 'trailing_stop'


class Type2(Enum):
    market = 'market'
    limit = 'limit'
    stop = 'stop'
    stop_limit = 'stop_limit'
    trailing_stop = 'trailing_stop'


class Side2(Enum):
    buy = 'buy'
    sell = 'sell'


class TimeInForce1(Enum):
    day = 'day'
    gtc = 'gtc'
    opg = 'opg'
    cls = 'cls'
    ioc = 'ioc'
    fok = 'fok'


class Status3(Enum):
    new = 'new'
    partially_filled = 'partially_filled'
    filled = 'filled'
    done_for_day = 'done_for_day'
    canceled = 'canceled'
    expired = 'expired'
    replaced = 'replaced'
    pending_cancel = 'pending_cancel'
    pending_replace = 'pending_replace'
    accepted = 'accepted'
    pending_new = 'pending_new'
    accepted_for_bidding = 'accepted_for_bidding'
    stopped = 'stopped'
    rejected = 'rejected'
    suspended = 'suspended'
    calculated = 'calculated'


class OrderObject(BaseModel):
    id: Optional[UUID] = Field(None, example='61e69015-8549-4bfd-b9c3-01e75843f47d')
    client_order_id: Optional[str] = Field(
        None, example='61e69015-8549-4bfd-b9c3-01e75843f47d'
    )
    created_at: Optional[datetime] = Field(None, example='2021-03-16T18:38:01.942282Z')
    updated_at: Optional[datetime] = Field(None, example='2021-03-16T18:38:01.942282Z')
    submitted_at: Optional[datetime] = Field(
        None, example='2021-03-16T18:38:01.942282Z'
    )
    filled_at: Optional[datetime] = Field(None, example='2021-03-16T18:38:01.942282Z')
    expired_at: Optional[datetime] = Field(None, example='2021-03-16T18:38:01.942282Z')
    canceled_at: Optional[datetime] = Field(None, example='2021-03-16T18:38:01.942282Z')
    failed_at: Optional[datetime] = Field(None, example='2021-03-16T18:38:01.942282Z')
    replaced_at: Optional[datetime] = Field(None, example='2021-03-16T18:38:01.942282Z')
    replaced_by: Optional[UUID] = Field(
        None, example='61e69015-8549-4bfd-b9c3-01e75843f47d'
    )
    replaces: Optional[UUID] = Field(
        None, example='61e69015-8549-4bfd-b9c3-01e75843f47d'
    )
    asset_id: Optional[UUID] = Field(
        None, example='61e69015-8549-4bfd-b9c3-01e75843f47d'
    )
    symbol: Optional[str] = Field(None, example='AALP')
    asset_class: Optional[str] = None
    notional: Optional[Decimal] = Field(None, example=4.2)
    qty: Optional[Decimal] = Field(None, example=4.2)
    filled_qty: Optional[Decimal] = Field(None, example=4.2)
    filled_avg_price: Optional[Decimal] = Field(None, example=4.2)
    order_class: Optional[OrderClass1] = Field(None, example='bracket')
    order_type: Optional[OrderType] = Field(None, example='stop')
    type: Optional[Type2] = Field(None, example='stop')
    side: Optional[Side2] = Field(None, example='buy')
    time_in_force: Optional[TimeInForce1] = Field(None, example='gtc')
    limit_price: Optional[Decimal] = Field(None, example=3.14)
    stop_price: Optional[Decimal] = Field(None, example=3.14)
    status: Optional[Status3] = Field(None, example='filled')
    extended_hours: Optional[bool] = Field(None, example=True)
    legs: Optional[Sequence[OrderObject]] = None
    trail_price: Optional[Decimal] = Field(None, example=3.14)
    trail_percent: Optional[Decimal] = Field(None, example=5)
    hwm: Optional[Decimal] = Field(None, example=3.14)
    commission: Optional[Decimal] = Field(None, example=3.14)


class TimeInForce2(Enum):
    day = 'day'
    gtc = 'gtc'
    opg = 'opg'
    cls = 'cls'
    ioc = 'ioc'
    fok = 'fok'


class PatchOrder(BaseModel):
    qty: Optional[Decimal] = Field(None, example=4.2)
    time_in_force: Optional[TimeInForce2] = Field(None, example='gtc')
    limit_price: Optional[Decimal] = Field(None, example=3.14)
    stop_price: Optional[Decimal] = Field(None, example=3.14)
    trail: Optional[Decimal] = Field(None, example=3.14)
    client_order_id: Optional[str] = Field(
        None, example='61e69015-8549-4bfd-b9c3-01e75843f47d'
    )
    created_at: datetime
    updated_at: datetime


class Status4(Enum):
    QUEUED = 'QUEUED'
    CANCEL_REQUESTED = 'CANCEL_REQUESTED'
    SENT_TO_CLEARING = 'SENT_TO_CLEARING'
    APPROVED = 'APPROVED'
    CANCELED = 'CANCELED'


class BankCodeType(Enum):
    ABA = 'ABA'
    BIC = 'BIC'


class BankData(BaseModel):
    name: str
    bank_code: str
    bank_code_type: BankCodeType
    country: Optional[str] = None
    state_province: Optional[str] = None
    postal_code: Optional[str] = None
    city: Optional[str] = None
    street_address: Optional[str] = None
    account_number: str


class IdentifiedResource(BaseModel):
    id: UUID = Field(..., example='61e69015-8549-4bfd-b9c3-01e75843f47d')
    created_at: datetime = Field(..., example='2021-03-16T18:38:01.942282Z')
    updated_at: datetime = Field(..., example='2021-03-16T18:38:01.942282Z')


class BankAccountType(Enum):
    CHECKING = 'CHECKING'
    SAVINGS = 'SAVINGS'


class ACHRelationshipData(BaseModel):
    account_owner_name: constr(min_length=1)
    bank_account_type: BankAccountType
    bank_account_number: constr(min_length=1)
    bank_routing_number: constr(min_length=1)
    nickname: Optional[constr(min_length=1)] = None


class Status5(Enum):
    QUEUED = 'QUEUED'
    APPROVED = 'APPROVED'
    PENDING = 'PENDING'
    CANCEL_REQUESTED = 'CANCEL_REQUESTED'


class ACHRelationshipResource(IdentifiedResource, ACHRelationshipData):
    account_id: UUID
    status: Status5


class Error(BaseModel):
    code: float
    message: str


class Type3(Enum):
    ach = 'ach'
    wire = 'wire'


class Status6(Enum):
    QUEUED = 'QUEUED'
    PENDING = 'PENDING'
    REJECTED = 'REJECTED'
    APPROVED = 'APPROVED'
    COMPLETE = 'COMPLETE'


class TransferResource(IdentifiedResource):
    type: Type3
    status: Status6
    account_id: UUID
    reason: Optional[str] = None
    expires_at: datetime


class TransferType(Enum):
    ach = 'ach'
    wire = 'wire'


class Timing(Enum):
    immediate = 'immediate'


class TransferData(BaseModel):
    transfer_type: TransferType
    timing: Optional[Timing] = None


class Direction(Enum):
    INCOMING = 'INCOMING'
    OUTGOING = 'OUTGOING'


class UntypedTransferData(BaseModel):
    amount: Decimal
    direction: Direction


class EntryType(Enum):
    JNLC = 'JNLC'
    JNLS = 'JNLS'


class JournalData(BaseModel):
    entry_type: EntryType
    from_account: UUID
    to_account: UUID
    amount: Optional[Decimal] = Field(
        None,
        description='Required for JNLC.\nThe dollar amount to move. It has to be\na positive value.\n',
    )
    symbol: Optional[str] = Field(None, description='Required for JNLS.\n')
    qty: Optional[Decimal] = Field(
        None,
        description='Required for JNLS.\nThe number of shares to move. It has to be\na positive value.\n',
    )


class JournalResource(BaseModel):
    __root__: Union[JournalJNLC, JournalJNLS] = Field(..., title='JournalResource')


class EntryType1(Enum):
    JNLC = 'JNLC'


class Entry(BaseModel):
    to_account: UUID
    amount: str


class BatchJournalRequest(BaseModel):
    entry_type: EntryType1
    from_account: UUID
    description: Optional[str] = None
    entries: Optional[Sequence[Entry]] = None


class EntryType2(Enum):
    JNLC = 'JNLC'


class Status7(Enum):
    pending = 'pending'
    canceled = 'canceled'
    executed = 'executed'
    queued = 'queued'
    rejected = 'rejected'
    deleted = 'deleted'


class BatchJournalResponse(BaseModel):
    id: UUID
    error_message: str
    entry_type: EntryType2
    from_account: UUID
    to_account: UUID
    symbol: str
    qty: Optional[str] = Field(...)
    price: str
    status: Status7
    settle_date: Optional[str] = Field(...)
    system_date: Optional[str] = Field(...)
    net_amount: str
    description: str


class AssetResource(BaseModel):
    id: Optional[str] = Field(None, example='904837e3-3b76-47ec-b432-046db621571b')
    class_: Optional[str] = Field(None, alias='class', example='us_equity')
    exchange: Optional[str] = Field(None, example='NASDAQ')
    symbol: Optional[str] = Field(None, example='AAPL')
    name: Optional[str] = Field(None, example='Apple Inc. Common Stock')
    status: Optional[str] = Field(None, example='active')
    tradable: Optional[bool] = Field(None, example=True)
    marginable: Optional[bool] = Field(None, example=True)
    shortable: Optional[bool] = Field(None, example=True)
    easy_to_borrow: Optional[bool] = Field(None, example=True)
    fractionable: Optional[bool] = Field(None, example=True)


class Position(BaseModel):
    asset_id: Optional[str] = None
    symbol: Optional[str] = None
    exchange: Optional[str] = None
    asset_class: Optional[str] = None
    avg_entry_price: Optional[str] = None
    qty: Optional[str] = None
    side: Optional[str] = None
    market_value: Optional[str] = None
    cost_basis: Optional[str] = None
    unrealized_pl: Optional[str] = None
    unrealized_plpc: Optional[str] = None
    unrealized_intraday_pl: Optional[str] = None
    unrealized_intraday_plpc: Optional[str] = None
    current_price: Optional[str] = None
    lastday_price: Optional[str] = None
    change_today: Optional[str] = None


class Account(BaseModel):
    id: Optional[UUID] = None
    account_number: Optional[str] = None
    status: Optional[AccountStatus] = None
    currency: Optional[str] = Field(None, description='Always "USD"')
    created_at: Optional[datetime] = None
    last_equity: Optional[Decimal] = None
    kyc_results: Optional[KycResult] = None


class BankResource(IdentifiedResource, BankData):
    account_id: UUID
    status: Status4


class UntypedACHTransferData(UntypedTransferData):
    relationship_id: UUID


class UntypedWireTransferData(UntypedTransferData):
    additional_information: Optional[str] = None
    bank_id: UUID


OrderObject.update_forward_refs()
