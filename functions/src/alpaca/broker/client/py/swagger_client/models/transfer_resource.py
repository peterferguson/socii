# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.identified_resource import IdentifiedResource  # noqa: F401,E501

class TransferResource(IdentifiedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'status': 'str',
        'account_id': 'str',
        'reason': 'str',
        'expires_at': 'datetime'
    }
    if hasattr(IdentifiedResource, "swagger_types"):
        swagger_types.update(IdentifiedResource.swagger_types)

    attribute_map = {
        'type': 'type',
        'status': 'status',
        'account_id': 'account_id',
        'reason': 'reason',
        'expires_at': 'expires_at'
    }
    if hasattr(IdentifiedResource, "attribute_map"):
        attribute_map.update(IdentifiedResource.attribute_map)

    discriminator_value_class_map = {
            'ach'.lower(): '#/components/schemas/UntypedACHTransferData',
            'wire'.lower(): '#/components/schemas/UntypedWireTransferData',
    }

    def __init__(self, type=None, status=None, account_id=None, reason=None, expires_at=None, *args, **kwargs):  # noqa: E501
        """TransferResource - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._status = None
        self._account_id = None
        self._reason = None
        self._expires_at = None
        self.discriminator = 'type'
        self.type = type
        self.status = status
        self.account_id = account_id
        if reason is not None:
            self.reason = reason
        self.expires_at = expires_at
        IdentifiedResource.__init__(self, *args, **kwargs)

    @property
    def type(self):
        """Gets the type of this TransferResource.  # noqa: E501


        :return: The type of this TransferResource.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransferResource.


        :param type: The type of this TransferResource.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ach", "wire"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def status(self):
        """Gets the status of this TransferResource.  # noqa: E501


        :return: The status of this TransferResource.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransferResource.


        :param status: The status of this TransferResource.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["QUEUED", "PENDING", "REJECTED", "APPROVED", "COMPLETE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def account_id(self):
        """Gets the account_id of this TransferResource.  # noqa: E501


        :return: The account_id of this TransferResource.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TransferResource.


        :param account_id: The account_id of this TransferResource.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def reason(self):
        """Gets the reason of this TransferResource.  # noqa: E501


        :return: The reason of this TransferResource.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this TransferResource.


        :param reason: The reason of this TransferResource.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def expires_at(self):
        """Gets the expires_at of this TransferResource.  # noqa: E501


        :return: The expires_at of this TransferResource.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this TransferResource.


        :param expires_at: The expires_at of this TransferResource.  # noqa: E501
        :type: datetime
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")  # noqa: E501

        self._expires_at = expires_at

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransferResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransferResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
