# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PortfolioHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'list[int]',
        'equity': 'list[float]',
        'profit_loss': 'list[float]',
        'profit_loss_pct': 'list[float]',
        'base_value': 'float',
        'timeframe': 'str'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'equity': 'equity',
        'profit_loss': 'profit_loss',
        'profit_loss_pct': 'profit_loss_pct',
        'base_value': 'base_value',
        'timeframe': 'timeframe'
    }

    def __init__(self, timestamp=None, equity=None, profit_loss=None, profit_loss_pct=None, base_value=None, timeframe=None):  # noqa: E501
        """PortfolioHistory - a model defined in Swagger"""  # noqa: E501
        self._timestamp = None
        self._equity = None
        self._profit_loss = None
        self._profit_loss_pct = None
        self._base_value = None
        self._timeframe = None
        self.discriminator = None
        if timestamp is not None:
            self.timestamp = timestamp
        if equity is not None:
            self.equity = equity
        if profit_loss is not None:
            self.profit_loss = profit_loss
        if profit_loss_pct is not None:
            self.profit_loss_pct = profit_loss_pct
        if base_value is not None:
            self.base_value = base_value
        if timeframe is not None:
            self.timeframe = timeframe

    @property
    def timestamp(self):
        """Gets the timestamp of this PortfolioHistory.  # noqa: E501


        :return: The timestamp of this PortfolioHistory.  # noqa: E501
        :rtype: list[int]
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PortfolioHistory.


        :param timestamp: The timestamp of this PortfolioHistory.  # noqa: E501
        :type: list[int]
        """

        self._timestamp = timestamp

    @property
    def equity(self):
        """Gets the equity of this PortfolioHistory.  # noqa: E501


        :return: The equity of this PortfolioHistory.  # noqa: E501
        :rtype: list[float]
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this PortfolioHistory.


        :param equity: The equity of this PortfolioHistory.  # noqa: E501
        :type: list[float]
        """

        self._equity = equity

    @property
    def profit_loss(self):
        """Gets the profit_loss of this PortfolioHistory.  # noqa: E501


        :return: The profit_loss of this PortfolioHistory.  # noqa: E501
        :rtype: list[float]
        """
        return self._profit_loss

    @profit_loss.setter
    def profit_loss(self, profit_loss):
        """Sets the profit_loss of this PortfolioHistory.


        :param profit_loss: The profit_loss of this PortfolioHistory.  # noqa: E501
        :type: list[float]
        """

        self._profit_loss = profit_loss

    @property
    def profit_loss_pct(self):
        """Gets the profit_loss_pct of this PortfolioHistory.  # noqa: E501


        :return: The profit_loss_pct of this PortfolioHistory.  # noqa: E501
        :rtype: list[float]
        """
        return self._profit_loss_pct

    @profit_loss_pct.setter
    def profit_loss_pct(self, profit_loss_pct):
        """Sets the profit_loss_pct of this PortfolioHistory.


        :param profit_loss_pct: The profit_loss_pct of this PortfolioHistory.  # noqa: E501
        :type: list[float]
        """

        self._profit_loss_pct = profit_loss_pct

    @property
    def base_value(self):
        """Gets the base_value of this PortfolioHistory.  # noqa: E501


        :return: The base_value of this PortfolioHistory.  # noqa: E501
        :rtype: float
        """
        return self._base_value

    @base_value.setter
    def base_value(self, base_value):
        """Sets the base_value of this PortfolioHistory.


        :param base_value: The base_value of this PortfolioHistory.  # noqa: E501
        :type: float
        """

        self._base_value = base_value

    @property
    def timeframe(self):
        """Gets the timeframe of this PortfolioHistory.  # noqa: E501


        :return: The timeframe of this PortfolioHistory.  # noqa: E501
        :rtype: str
        """
        return self._timeframe

    @timeframe.setter
    def timeframe(self, timeframe):
        """Sets the timeframe of this PortfolioHistory.


        :param timeframe: The timeframe of this PortfolioHistory.  # noqa: E501
        :type: str
        """
        allowed_values = ["1Min", "5Min", "15Min", "1H", "1D"]  # noqa: E501
        if timeframe not in allowed_values:
            raise ValueError(
                "Invalid value for `timeframe` ({0}), must be one of {1}"  # noqa: E501
                .format(timeframe, allowed_values)
            )

        self._timeframe = timeframe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortfolioHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
