# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact': 'Contact',
        'identity': 'Identity',
        'disclosures': 'Disclosures',
        'trusted_contact': 'TrustedContact'
    }

    attribute_map = {
        'contact': 'contact',
        'identity': 'identity',
        'disclosures': 'disclosures',
        'trusted_contact': 'trustedContact'
    }

    def __init__(self, contact=None, identity=None, disclosures=None, trusted_contact=None):  # noqa: E501
        """AccountUpdate - a model defined in Swagger"""  # noqa: E501
        self._contact = None
        self._identity = None
        self._disclosures = None
        self._trusted_contact = None
        self.discriminator = None
        if contact is not None:
            self.contact = contact
        if identity is not None:
            self.identity = identity
        if disclosures is not None:
            self.disclosures = disclosures
        if trusted_contact is not None:
            self.trusted_contact = trusted_contact

    @property
    def contact(self):
        """Gets the contact of this AccountUpdate.  # noqa: E501


        :return: The contact of this AccountUpdate.  # noqa: E501
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this AccountUpdate.


        :param contact: The contact of this AccountUpdate.  # noqa: E501
        :type: Contact
        """

        self._contact = contact

    @property
    def identity(self):
        """Gets the identity of this AccountUpdate.  # noqa: E501


        :return: The identity of this AccountUpdate.  # noqa: E501
        :rtype: Identity
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this AccountUpdate.


        :param identity: The identity of this AccountUpdate.  # noqa: E501
        :type: Identity
        """

        self._identity = identity

    @property
    def disclosures(self):
        """Gets the disclosures of this AccountUpdate.  # noqa: E501


        :return: The disclosures of this AccountUpdate.  # noqa: E501
        :rtype: Disclosures
        """
        return self._disclosures

    @disclosures.setter
    def disclosures(self, disclosures):
        """Sets the disclosures of this AccountUpdate.


        :param disclosures: The disclosures of this AccountUpdate.  # noqa: E501
        :type: Disclosures
        """

        self._disclosures = disclosures

    @property
    def trusted_contact(self):
        """Gets the trusted_contact of this AccountUpdate.  # noqa: E501


        :return: The trusted_contact of this AccountUpdate.  # noqa: E501
        :rtype: TrustedContact
        """
        return self._trusted_contact

    @trusted_contact.setter
    def trusted_contact(self, trusted_contact):
        """Sets the trusted_contact of this AccountUpdate.


        :param trusted_contact: The trusted_contact of this AccountUpdate.  # noqa: E501
        :type: TrustedContact
        """

        self._trusted_contact = trusted_contact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
