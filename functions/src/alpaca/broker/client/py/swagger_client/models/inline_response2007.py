# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2007(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'name': 'str',
        'description': 'str',
        'url': 'str',
        'terms_of_use': 'str',
        'privacy_policy': 'str',
        'status': 'str',
        'redirect_uri': 'list[str]',
        'live_trading_approved': 'bool'
    }

    attribute_map = {
        'client_id': 'client_id',
        'name': 'name',
        'description': 'description',
        'url': 'url',
        'terms_of_use': 'terms_of_use',
        'privacy_policy': 'privacy_policy',
        'status': 'status',
        'redirect_uri': 'redirect_uri',
        'live_trading_approved': 'live_trading_approved'
    }

    def __init__(self, client_id=None, name=None, description=None, url=None, terms_of_use=None, privacy_policy=None, status=None, redirect_uri=None, live_trading_approved=None):  # noqa: E501
        """InlineResponse2007 - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._name = None
        self._description = None
        self._url = None
        self._terms_of_use = None
        self._privacy_policy = None
        self._status = None
        self._redirect_uri = None
        self._live_trading_approved = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if url is not None:
            self.url = url
        if terms_of_use is not None:
            self.terms_of_use = terms_of_use
        if privacy_policy is not None:
            self.privacy_policy = privacy_policy
        if status is not None:
            self.status = status
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        if live_trading_approved is not None:
            self.live_trading_approved = live_trading_approved

    @property
    def client_id(self):
        """Gets the client_id of this InlineResponse2007.  # noqa: E501


        :return: The client_id of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this InlineResponse2007.


        :param client_id: The client_id of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def name(self):
        """Gets the name of this InlineResponse2007.  # noqa: E501


        :return: The name of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2007.


        :param name: The name of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this InlineResponse2007.  # noqa: E501


        :return: The description of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse2007.


        :param description: The description of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def url(self):
        """Gets the url of this InlineResponse2007.  # noqa: E501


        :return: The url of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse2007.


        :param url: The url of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def terms_of_use(self):
        """Gets the terms_of_use of this InlineResponse2007.  # noqa: E501

        URL of Terms of Use  # noqa: E501

        :return: The terms_of_use of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._terms_of_use

    @terms_of_use.setter
    def terms_of_use(self, terms_of_use):
        """Sets the terms_of_use of this InlineResponse2007.

        URL of Terms of Use  # noqa: E501

        :param terms_of_use: The terms_of_use of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._terms_of_use = terms_of_use

    @property
    def privacy_policy(self):
        """Gets the privacy_policy of this InlineResponse2007.  # noqa: E501

        URL of Privacy Policy  # noqa: E501

        :return: The privacy_policy of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._privacy_policy

    @privacy_policy.setter
    def privacy_policy(self, privacy_policy):
        """Sets the privacy_policy of this InlineResponse2007.

        URL of Privacy Policy  # noqa: E501

        :param privacy_policy: The privacy_policy of this InlineResponse2007.  # noqa: E501
        :type: str
        """

        self._privacy_policy = privacy_policy

    @property
    def status(self):
        """Gets the status of this InlineResponse2007.  # noqa: E501


        :return: The status of this InlineResponse2007.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2007.


        :param status: The status of this InlineResponse2007.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this InlineResponse2007.  # noqa: E501


        :return: The redirect_uri of this InlineResponse2007.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this InlineResponse2007.


        :param redirect_uri: The redirect_uri of this InlineResponse2007.  # noqa: E501
        :type: list[str]
        """

        self._redirect_uri = redirect_uri

    @property
    def live_trading_approved(self):
        """Gets the live_trading_approved of this InlineResponse2007.  # noqa: E501


        :return: The live_trading_approved of this InlineResponse2007.  # noqa: E501
        :rtype: bool
        """
        return self._live_trading_approved

    @live_trading_approved.setter
    def live_trading_approved(self, live_trading_approved):
        """Sets the live_trading_approved of this InlineResponse2007.


        :param live_trading_approved: The live_trading_approved of this InlineResponse2007.  # noqa: E501
        :type: bool
        """

        self._live_trading_approved = live_trading_approved

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2007, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2007):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
