# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.identified_resource import IdentifiedResource  # noqa: F401,E501

class BankResource(IdentifiedResource):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'bank_code': 'str',
        'bank_code_type': 'str',
        'country': 'str',
        'state_province': 'str',
        'postal_code': 'str',
        'city': 'str',
        'street_address': 'str',
        'account_number': 'str',
        'account_id': 'str',
        'status': 'str'
    }
    if hasattr(IdentifiedResource, "swagger_types"):
        swagger_types.update(IdentifiedResource.swagger_types)

    attribute_map = {
        'name': 'name',
        'bank_code': 'bank_code',
        'bank_code_type': 'bank_code_type',
        'country': 'country',
        'state_province': 'state_province',
        'postal_code': 'postal_code',
        'city': 'city',
        'street_address': 'street_address',
        'account_number': 'account_number',
        'account_id': 'account_id',
        'status': 'status'
    }
    if hasattr(IdentifiedResource, "attribute_map"):
        attribute_map.update(IdentifiedResource.attribute_map)

    def __init__(self, name=None, bank_code=None, bank_code_type=None, country=None, state_province=None, postal_code=None, city=None, street_address=None, account_number=None, account_id=None, status=None, *args, **kwargs):  # noqa: E501
        """BankResource - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._bank_code = None
        self._bank_code_type = None
        self._country = None
        self._state_province = None
        self._postal_code = None
        self._city = None
        self._street_address = None
        self._account_number = None
        self._account_id = None
        self._status = None
        self.discriminator = None
        self.name = name
        self.bank_code = bank_code
        self.bank_code_type = bank_code_type
        if country is not None:
            self.country = country
        if state_province is not None:
            self.state_province = state_province
        if postal_code is not None:
            self.postal_code = postal_code
        if city is not None:
            self.city = city
        if street_address is not None:
            self.street_address = street_address
        self.account_number = account_number
        self.account_id = account_id
        self.status = status
        IdentifiedResource.__init__(self, *args, **kwargs)

    @property
    def name(self):
        """Gets the name of this BankResource.  # noqa: E501


        :return: The name of this BankResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BankResource.


        :param name: The name of this BankResource.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def bank_code(self):
        """Gets the bank_code of this BankResource.  # noqa: E501


        :return: The bank_code of this BankResource.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this BankResource.


        :param bank_code: The bank_code of this BankResource.  # noqa: E501
        :type: str
        """
        if bank_code is None:
            raise ValueError("Invalid value for `bank_code`, must not be `None`")  # noqa: E501

        self._bank_code = bank_code

    @property
    def bank_code_type(self):
        """Gets the bank_code_type of this BankResource.  # noqa: E501


        :return: The bank_code_type of this BankResource.  # noqa: E501
        :rtype: str
        """
        return self._bank_code_type

    @bank_code_type.setter
    def bank_code_type(self, bank_code_type):
        """Sets the bank_code_type of this BankResource.


        :param bank_code_type: The bank_code_type of this BankResource.  # noqa: E501
        :type: str
        """
        if bank_code_type is None:
            raise ValueError("Invalid value for `bank_code_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ABA", "BIC"]  # noqa: E501
        if bank_code_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bank_code_type` ({0}), must be one of {1}"  # noqa: E501
                .format(bank_code_type, allowed_values)
            )

        self._bank_code_type = bank_code_type

    @property
    def country(self):
        """Gets the country of this BankResource.  # noqa: E501


        :return: The country of this BankResource.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BankResource.


        :param country: The country of this BankResource.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def state_province(self):
        """Gets the state_province of this BankResource.  # noqa: E501


        :return: The state_province of this BankResource.  # noqa: E501
        :rtype: str
        """
        return self._state_province

    @state_province.setter
    def state_province(self, state_province):
        """Sets the state_province of this BankResource.


        :param state_province: The state_province of this BankResource.  # noqa: E501
        :type: str
        """

        self._state_province = state_province

    @property
    def postal_code(self):
        """Gets the postal_code of this BankResource.  # noqa: E501


        :return: The postal_code of this BankResource.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this BankResource.


        :param postal_code: The postal_code of this BankResource.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def city(self):
        """Gets the city of this BankResource.  # noqa: E501


        :return: The city of this BankResource.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this BankResource.


        :param city: The city of this BankResource.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def street_address(self):
        """Gets the street_address of this BankResource.  # noqa: E501


        :return: The street_address of this BankResource.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this BankResource.


        :param street_address: The street_address of this BankResource.  # noqa: E501
        :type: str
        """

        self._street_address = street_address

    @property
    def account_number(self):
        """Gets the account_number of this BankResource.  # noqa: E501


        :return: The account_number of this BankResource.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankResource.


        :param account_number: The account_number of this BankResource.  # noqa: E501
        :type: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    @property
    def account_id(self):
        """Gets the account_id of this BankResource.  # noqa: E501


        :return: The account_id of this BankResource.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BankResource.


        :param account_id: The account_id of this BankResource.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def status(self):
        """Gets the status of this BankResource.  # noqa: E501


        :return: The status of this BankResource.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BankResource.


        :param status: The status of this BankResource.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["QUEUED", "CANCEL_REQUESTED", "SENT_TO_CLEARING", "APPROVED", "CANCELED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
