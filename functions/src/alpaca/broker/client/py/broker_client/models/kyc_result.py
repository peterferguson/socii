# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KycResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reject': 'object',
        'accept': 'object',
        'indeterminate': 'object',
        'addidional_information': 'str'
    }

    attribute_map = {
        'reject': 'reject',
        'accept': 'accept',
        'indeterminate': 'indeterminate',
        'addidional_information': 'addidional_information'
    }

    def __init__(self, reject=None, accept=None, indeterminate=None, addidional_information=None):  # noqa: E501
        """KycResult - a model defined in Swagger"""  # noqa: E501
        self._reject = None
        self._accept = None
        self._indeterminate = None
        self._addidional_information = None
        self.discriminator = None
        if reject is not None:
            self.reject = reject
        if accept is not None:
            self.accept = accept
        if indeterminate is not None:
            self.indeterminate = indeterminate
        if addidional_information is not None:
            self.addidional_information = addidional_information

    @property
    def reject(self):
        """Gets the reject of this KycResult.  # noqa: E501


        :return: The reject of this KycResult.  # noqa: E501
        :rtype: object
        """
        return self._reject

    @reject.setter
    def reject(self, reject):
        """Sets the reject of this KycResult.


        :param reject: The reject of this KycResult.  # noqa: E501
        :type: object
        """

        self._reject = reject

    @property
    def accept(self):
        """Gets the accept of this KycResult.  # noqa: E501


        :return: The accept of this KycResult.  # noqa: E501
        :rtype: object
        """
        return self._accept

    @accept.setter
    def accept(self, accept):
        """Sets the accept of this KycResult.


        :param accept: The accept of this KycResult.  # noqa: E501
        :type: object
        """

        self._accept = accept

    @property
    def indeterminate(self):
        """Gets the indeterminate of this KycResult.  # noqa: E501


        :return: The indeterminate of this KycResult.  # noqa: E501
        :rtype: object
        """
        return self._indeterminate

    @indeterminate.setter
    def indeterminate(self, indeterminate):
        """Sets the indeterminate of this KycResult.


        :param indeterminate: The indeterminate of this KycResult.  # noqa: E501
        :type: object
        """

        self._indeterminate = indeterminate

    @property
    def addidional_information(self):
        """Gets the addidional_information of this KycResult.  # noqa: E501


        :return: The addidional_information of this KycResult.  # noqa: E501
        :rtype: str
        """
        return self._addidional_information

    @addidional_information.setter
    def addidional_information(self, addidional_information):
        """Sets the addidional_information of this KycResult.


        :param addidional_information: The addidional_information of this KycResult.  # noqa: E501
        :type: str
        """

        self._addidional_information = addidional_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KycResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KycResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
