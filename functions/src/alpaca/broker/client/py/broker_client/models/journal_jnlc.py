# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JournalJNLC(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'entry_type': 'str',
        'from_account': 'str',
        'to_account': 'str',
        'description': 'str',
        'settle_date': 'date',
        'status': 'str',
        'net_amount': 'str',
        'transmitter_name': 'str',
        'transmitter_account_number': 'str',
        'transmitter_address': 'str',
        'transmitter_financial_institution': 'str',
        'transmitter_timestamp': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'entry_type': 'entry_type',
        'from_account': 'from_account',
        'to_account': 'to_account',
        'description': 'description',
        'settle_date': 'settle_date',
        'status': 'status',
        'net_amount': 'net_amount',
        'transmitter_name': 'transmitter_name',
        'transmitter_account_number': 'transmitter_account_number',
        'transmitter_address': 'transmitter_address',
        'transmitter_financial_institution': 'transmitter_financial_institution',
        'transmitter_timestamp': 'transmitter_timestamp'
    }

    def __init__(self, id=None, entry_type=None, from_account=None, to_account=None, description=None, settle_date=None, status=None, net_amount=None, transmitter_name=None, transmitter_account_number=None, transmitter_address=None, transmitter_financial_institution=None, transmitter_timestamp=None):  # noqa: E501
        """JournalJNLC - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._entry_type = None
        self._from_account = None
        self._to_account = None
        self._description = None
        self._settle_date = None
        self._status = None
        self._net_amount = None
        self._transmitter_name = None
        self._transmitter_account_number = None
        self._transmitter_address = None
        self._transmitter_financial_institution = None
        self._transmitter_timestamp = None
        self.discriminator = None
        self.id = id
        self.entry_type = entry_type
        self.from_account = from_account
        self.to_account = to_account
        if description is not None:
            self.description = description
        self.settle_date = settle_date
        if status is not None:
            self.status = status
        self.net_amount = net_amount
        if transmitter_name is not None:
            self.transmitter_name = transmitter_name
        if transmitter_account_number is not None:
            self.transmitter_account_number = transmitter_account_number
        if transmitter_address is not None:
            self.transmitter_address = transmitter_address
        if transmitter_financial_institution is not None:
            self.transmitter_financial_institution = transmitter_financial_institution
        if transmitter_timestamp is not None:
            self.transmitter_timestamp = transmitter_timestamp

    @property
    def id(self):
        """Gets the id of this JournalJNLC.  # noqa: E501

        journal ID  # noqa: E501

        :return: The id of this JournalJNLC.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JournalJNLC.

        journal ID  # noqa: E501

        :param id: The id of this JournalJNLC.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def entry_type(self):
        """Gets the entry_type of this JournalJNLC.  # noqa: E501

        JNLC (constant)  # noqa: E501

        :return: The entry_type of this JournalJNLC.  # noqa: E501
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this JournalJNLC.

        JNLC (constant)  # noqa: E501

        :param entry_type: The entry_type of this JournalJNLC.  # noqa: E501
        :type: str
        """
        if entry_type is None:
            raise ValueError("Invalid value for `entry_type`, must not be `None`")  # noqa: E501

        self._entry_type = entry_type

    @property
    def from_account(self):
        """Gets the from_account of this JournalJNLC.  # noqa: E501

        account ID the amount goes from  # noqa: E501

        :return: The from_account of this JournalJNLC.  # noqa: E501
        :rtype: str
        """
        return self._from_account

    @from_account.setter
    def from_account(self, from_account):
        """Sets the from_account of this JournalJNLC.

        account ID the amount goes from  # noqa: E501

        :param from_account: The from_account of this JournalJNLC.  # noqa: E501
        :type: str
        """
        if from_account is None:
            raise ValueError("Invalid value for `from_account`, must not be `None`")  # noqa: E501

        self._from_account = from_account

    @property
    def to_account(self):
        """Gets the to_account of this JournalJNLC.  # noqa: E501


        :return: The to_account of this JournalJNLC.  # noqa: E501
        :rtype: str
        """
        return self._to_account

    @to_account.setter
    def to_account(self, to_account):
        """Sets the to_account of this JournalJNLC.


        :param to_account: The to_account of this JournalJNLC.  # noqa: E501
        :type: str
        """
        if to_account is None:
            raise ValueError("Invalid value for `to_account`, must not be `None`")  # noqa: E501

        self._to_account = to_account

    @property
    def description(self):
        """Gets the description of this JournalJNLC.  # noqa: E501

        ID the amount goes to  # noqa: E501

        :return: The description of this JournalJNLC.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JournalJNLC.

        ID the amount goes to  # noqa: E501

        :param description: The description of this JournalJNLC.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def settle_date(self):
        """Gets the settle_date of this JournalJNLC.  # noqa: E501


        :return: The settle_date of this JournalJNLC.  # noqa: E501
        :rtype: date
        """
        return self._settle_date

    @settle_date.setter
    def settle_date(self, settle_date):
        """Sets the settle_date of this JournalJNLC.


        :param settle_date: The settle_date of this JournalJNLC.  # noqa: E501
        :type: date
        """
        if settle_date is None:
            raise ValueError("Invalid value for `settle_date`, must not be `None`")  # noqa: E501

        self._settle_date = settle_date

    @property
    def status(self):
        """Gets the status of this JournalJNLC.  # noqa: E501


        :return: The status of this JournalJNLC.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JournalJNLC.


        :param status: The status of this JournalJNLC.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "canceled", "executed", "queued", "rejected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def net_amount(self):
        """Gets the net_amount of this JournalJNLC.  # noqa: E501


        :return: The net_amount of this JournalJNLC.  # noqa: E501
        :rtype: str
        """
        return self._net_amount

    @net_amount.setter
    def net_amount(self, net_amount):
        """Sets the net_amount of this JournalJNLC.


        :param net_amount: The net_amount of this JournalJNLC.  # noqa: E501
        :type: str
        """
        if net_amount is None:
            raise ValueError("Invalid value for `net_amount`, must not be `None`")  # noqa: E501

        self._net_amount = net_amount

    @property
    def transmitter_name(self):
        """Gets the transmitter_name of this JournalJNLC.  # noqa: E501

        max 255 characters  # noqa: E501

        :return: The transmitter_name of this JournalJNLC.  # noqa: E501
        :rtype: str
        """
        return self._transmitter_name

    @transmitter_name.setter
    def transmitter_name(self, transmitter_name):
        """Sets the transmitter_name of this JournalJNLC.

        max 255 characters  # noqa: E501

        :param transmitter_name: The transmitter_name of this JournalJNLC.  # noqa: E501
        :type: str
        """

        self._transmitter_name = transmitter_name

    @property
    def transmitter_account_number(self):
        """Gets the transmitter_account_number of this JournalJNLC.  # noqa: E501

        max 255 characters  # noqa: E501

        :return: The transmitter_account_number of this JournalJNLC.  # noqa: E501
        :rtype: str
        """
        return self._transmitter_account_number

    @transmitter_account_number.setter
    def transmitter_account_number(self, transmitter_account_number):
        """Sets the transmitter_account_number of this JournalJNLC.

        max 255 characters  # noqa: E501

        :param transmitter_account_number: The transmitter_account_number of this JournalJNLC.  # noqa: E501
        :type: str
        """

        self._transmitter_account_number = transmitter_account_number

    @property
    def transmitter_address(self):
        """Gets the transmitter_address of this JournalJNLC.  # noqa: E501

        max 255 characters  # noqa: E501

        :return: The transmitter_address of this JournalJNLC.  # noqa: E501
        :rtype: str
        """
        return self._transmitter_address

    @transmitter_address.setter
    def transmitter_address(self, transmitter_address):
        """Sets the transmitter_address of this JournalJNLC.

        max 255 characters  # noqa: E501

        :param transmitter_address: The transmitter_address of this JournalJNLC.  # noqa: E501
        :type: str
        """

        self._transmitter_address = transmitter_address

    @property
    def transmitter_financial_institution(self):
        """Gets the transmitter_financial_institution of this JournalJNLC.  # noqa: E501

        max 255 characters  # noqa: E501

        :return: The transmitter_financial_institution of this JournalJNLC.  # noqa: E501
        :rtype: str
        """
        return self._transmitter_financial_institution

    @transmitter_financial_institution.setter
    def transmitter_financial_institution(self, transmitter_financial_institution):
        """Sets the transmitter_financial_institution of this JournalJNLC.

        max 255 characters  # noqa: E501

        :param transmitter_financial_institution: The transmitter_financial_institution of this JournalJNLC.  # noqa: E501
        :type: str
        """

        self._transmitter_financial_institution = transmitter_financial_institution

    @property
    def transmitter_timestamp(self):
        """Gets the transmitter_timestamp of this JournalJNLC.  # noqa: E501


        :return: The transmitter_timestamp of this JournalJNLC.  # noqa: E501
        :rtype: datetime
        """
        return self._transmitter_timestamp

    @transmitter_timestamp.setter
    def transmitter_timestamp(self, transmitter_timestamp):
        """Sets the transmitter_timestamp of this JournalJNLC.


        :param transmitter_timestamp: The transmitter_timestamp of this JournalJNLC.  # noqa: E501
        :type: datetime
        """

        self._transmitter_timestamp = transmitter_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JournalJNLC, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JournalJNLC):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
