# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Disclosures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employment_status': 'str',
        'employer_name': 'str',
        'employer_address': 'str',
        'employment_position': 'str',
        'is_control_person': 'bool',
        'is_affiliated_exchange_or_finra': 'bool',
        'is_politically_exposed': 'bool',
        'immediate_family_exposed': 'bool'
    }

    attribute_map = {
        'employment_status': 'employment_status',
        'employer_name': 'employer_name',
        'employer_address': 'employer_address',
        'employment_position': 'employment_position',
        'is_control_person': 'is_control_person',
        'is_affiliated_exchange_or_finra': 'is_affiliated_exchange_or_finra',
        'is_politically_exposed': 'is_politically_exposed',
        'immediate_family_exposed': 'immediate_family_exposed'
    }

    def __init__(self, employment_status=None, employer_name=None, employer_address=None, employment_position=None, is_control_person=None, is_affiliated_exchange_or_finra=None, is_politically_exposed=None, immediate_family_exposed=None):  # noqa: E501
        """Disclosures - a model defined in Swagger"""  # noqa: E501
        self._employment_status = None
        self._employer_name = None
        self._employer_address = None
        self._employment_position = None
        self._is_control_person = None
        self._is_affiliated_exchange_or_finra = None
        self._is_politically_exposed = None
        self._immediate_family_exposed = None
        self.discriminator = None
        if employment_status is not None:
            self.employment_status = employment_status
        if employer_name is not None:
            self.employer_name = employer_name
        if employer_address is not None:
            self.employer_address = employer_address
        if employment_position is not None:
            self.employment_position = employment_position
        self.is_control_person = is_control_person
        self.is_affiliated_exchange_or_finra = is_affiliated_exchange_or_finra
        self.is_politically_exposed = is_politically_exposed
        self.immediate_family_exposed = immediate_family_exposed

    @property
    def employment_status(self):
        """Gets the employment_status of this Disclosures.  # noqa: E501


        :return: The employment_status of this Disclosures.  # noqa: E501
        :rtype: str
        """
        return self._employment_status

    @employment_status.setter
    def employment_status(self, employment_status):
        """Sets the employment_status of this Disclosures.


        :param employment_status: The employment_status of this Disclosures.  # noqa: E501
        :type: str
        """
        allowed_values = ["unemployed", "employed", "student", "retired"]  # noqa: E501
        if employment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `employment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(employment_status, allowed_values)
            )

        self._employment_status = employment_status

    @property
    def employer_name(self):
        """Gets the employer_name of this Disclosures.  # noqa: E501


        :return: The employer_name of this Disclosures.  # noqa: E501
        :rtype: str
        """
        return self._employer_name

    @employer_name.setter
    def employer_name(self, employer_name):
        """Sets the employer_name of this Disclosures.


        :param employer_name: The employer_name of this Disclosures.  # noqa: E501
        :type: str
        """

        self._employer_name = employer_name

    @property
    def employer_address(self):
        """Gets the employer_address of this Disclosures.  # noqa: E501


        :return: The employer_address of this Disclosures.  # noqa: E501
        :rtype: str
        """
        return self._employer_address

    @employer_address.setter
    def employer_address(self, employer_address):
        """Sets the employer_address of this Disclosures.


        :param employer_address: The employer_address of this Disclosures.  # noqa: E501
        :type: str
        """

        self._employer_address = employer_address

    @property
    def employment_position(self):
        """Gets the employment_position of this Disclosures.  # noqa: E501


        :return: The employment_position of this Disclosures.  # noqa: E501
        :rtype: str
        """
        return self._employment_position

    @employment_position.setter
    def employment_position(self, employment_position):
        """Sets the employment_position of this Disclosures.


        :param employment_position: The employment_position of this Disclosures.  # noqa: E501
        :type: str
        """

        self._employment_position = employment_position

    @property
    def is_control_person(self):
        """Gets the is_control_person of this Disclosures.  # noqa: E501


        :return: The is_control_person of this Disclosures.  # noqa: E501
        :rtype: bool
        """
        return self._is_control_person

    @is_control_person.setter
    def is_control_person(self, is_control_person):
        """Sets the is_control_person of this Disclosures.


        :param is_control_person: The is_control_person of this Disclosures.  # noqa: E501
        :type: bool
        """
        if is_control_person is None:
            raise ValueError("Invalid value for `is_control_person`, must not be `None`")  # noqa: E501

        self._is_control_person = is_control_person

    @property
    def is_affiliated_exchange_or_finra(self):
        """Gets the is_affiliated_exchange_or_finra of this Disclosures.  # noqa: E501


        :return: The is_affiliated_exchange_or_finra of this Disclosures.  # noqa: E501
        :rtype: bool
        """
        return self._is_affiliated_exchange_or_finra

    @is_affiliated_exchange_or_finra.setter
    def is_affiliated_exchange_or_finra(self, is_affiliated_exchange_or_finra):
        """Sets the is_affiliated_exchange_or_finra of this Disclosures.


        :param is_affiliated_exchange_or_finra: The is_affiliated_exchange_or_finra of this Disclosures.  # noqa: E501
        :type: bool
        """
        if is_affiliated_exchange_or_finra is None:
            raise ValueError("Invalid value for `is_affiliated_exchange_or_finra`, must not be `None`")  # noqa: E501

        self._is_affiliated_exchange_or_finra = is_affiliated_exchange_or_finra

    @property
    def is_politically_exposed(self):
        """Gets the is_politically_exposed of this Disclosures.  # noqa: E501


        :return: The is_politically_exposed of this Disclosures.  # noqa: E501
        :rtype: bool
        """
        return self._is_politically_exposed

    @is_politically_exposed.setter
    def is_politically_exposed(self, is_politically_exposed):
        """Sets the is_politically_exposed of this Disclosures.


        :param is_politically_exposed: The is_politically_exposed of this Disclosures.  # noqa: E501
        :type: bool
        """
        if is_politically_exposed is None:
            raise ValueError("Invalid value for `is_politically_exposed`, must not be `None`")  # noqa: E501

        self._is_politically_exposed = is_politically_exposed

    @property
    def immediate_family_exposed(self):
        """Gets the immediate_family_exposed of this Disclosures.  # noqa: E501


        :return: The immediate_family_exposed of this Disclosures.  # noqa: E501
        :rtype: bool
        """
        return self._immediate_family_exposed

    @immediate_family_exposed.setter
    def immediate_family_exposed(self, immediate_family_exposed):
        """Sets the immediate_family_exposed of this Disclosures.


        :param immediate_family_exposed: The immediate_family_exposed of this Disclosures.  # noqa: E501
        :type: bool
        """
        if immediate_family_exposed is None:
            raise ValueError("Invalid value for `immediate_family_exposed`, must not be `None`")  # noqa: E501

        self._immediate_family_exposed = immediate_family_exposed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Disclosures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Disclosures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
