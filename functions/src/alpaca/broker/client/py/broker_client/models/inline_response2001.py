# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        '_class': 'str',
        'exchange': 'str',
        'symbol': 'str',
        'name': 'str',
        'status': 'str',
        'tradable': 'bool',
        'marginable': 'bool',
        'shortable': 'bool',
        'easy_to_borrow': 'bool',
        'fractionable': 'bool'
    }

    attribute_map = {
        'id': 'id',
        '_class': 'class',
        'exchange': 'exchange',
        'symbol': 'symbol',
        'name': 'name',
        'status': 'status',
        'tradable': 'tradable',
        'marginable': 'marginable',
        'shortable': 'shortable',
        'easy_to_borrow': 'easy_to_borrow',
        'fractionable': 'fractionable'
    }

    def __init__(self, id=None, _class=None, exchange=None, symbol=None, name=None, status=None, tradable=None, marginable=None, shortable=None, easy_to_borrow=None, fractionable=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self.__class = None
        self._exchange = None
        self._symbol = None
        self._name = None
        self._status = None
        self._tradable = None
        self._marginable = None
        self._shortable = None
        self._easy_to_borrow = None
        self._fractionable = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if _class is not None:
            self._class = _class
        if exchange is not None:
            self.exchange = exchange
        if symbol is not None:
            self.symbol = symbol
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if tradable is not None:
            self.tradable = tradable
        if marginable is not None:
            self.marginable = marginable
        if shortable is not None:
            self.shortable = shortable
        if easy_to_borrow is not None:
            self.easy_to_borrow = easy_to_borrow
        if fractionable is not None:
            self.fractionable = fractionable

    @property
    def id(self):
        """Gets the id of this InlineResponse2001.  # noqa: E501


        :return: The id of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2001.


        :param id: The id of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def _class(self):
        """Gets the _class of this InlineResponse2001.  # noqa: E501


        :return: The _class of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this InlineResponse2001.


        :param _class: The _class of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def exchange(self):
        """Gets the exchange of this InlineResponse2001.  # noqa: E501


        :return: The exchange of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this InlineResponse2001.


        :param exchange: The exchange of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def symbol(self):
        """Gets the symbol of this InlineResponse2001.  # noqa: E501


        :return: The symbol of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InlineResponse2001.


        :param symbol: The symbol of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def name(self):
        """Gets the name of this InlineResponse2001.  # noqa: E501


        :return: The name of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2001.


        :param name: The name of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this InlineResponse2001.  # noqa: E501


        :return: The status of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2001.


        :param status: The status of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tradable(self):
        """Gets the tradable of this InlineResponse2001.  # noqa: E501


        :return: The tradable of this InlineResponse2001.  # noqa: E501
        :rtype: bool
        """
        return self._tradable

    @tradable.setter
    def tradable(self, tradable):
        """Sets the tradable of this InlineResponse2001.


        :param tradable: The tradable of this InlineResponse2001.  # noqa: E501
        :type: bool
        """

        self._tradable = tradable

    @property
    def marginable(self):
        """Gets the marginable of this InlineResponse2001.  # noqa: E501


        :return: The marginable of this InlineResponse2001.  # noqa: E501
        :rtype: bool
        """
        return self._marginable

    @marginable.setter
    def marginable(self, marginable):
        """Sets the marginable of this InlineResponse2001.


        :param marginable: The marginable of this InlineResponse2001.  # noqa: E501
        :type: bool
        """

        self._marginable = marginable

    @property
    def shortable(self):
        """Gets the shortable of this InlineResponse2001.  # noqa: E501


        :return: The shortable of this InlineResponse2001.  # noqa: E501
        :rtype: bool
        """
        return self._shortable

    @shortable.setter
    def shortable(self, shortable):
        """Sets the shortable of this InlineResponse2001.


        :param shortable: The shortable of this InlineResponse2001.  # noqa: E501
        :type: bool
        """

        self._shortable = shortable

    @property
    def easy_to_borrow(self):
        """Gets the easy_to_borrow of this InlineResponse2001.  # noqa: E501


        :return: The easy_to_borrow of this InlineResponse2001.  # noqa: E501
        :rtype: bool
        """
        return self._easy_to_borrow

    @easy_to_borrow.setter
    def easy_to_borrow(self, easy_to_borrow):
        """Sets the easy_to_borrow of this InlineResponse2001.


        :param easy_to_borrow: The easy_to_borrow of this InlineResponse2001.  # noqa: E501
        :type: bool
        """

        self._easy_to_borrow = easy_to_borrow

    @property
    def fractionable(self):
        """Gets the fractionable of this InlineResponse2001.  # noqa: E501


        :return: The fractionable of this InlineResponse2001.  # noqa: E501
        :rtype: bool
        """
        return self._fractionable

    @fractionable.setter
    def fractionable(self, fractionable):
        """Sets the fractionable of this InlineResponse2001.


        :param fractionable: The fractionable of this InlineResponse2001.  # noqa: E501
        :type: bool
        """

        self._fractionable = fractionable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
