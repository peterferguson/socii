# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JournalData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_type': 'str',
        'from_account': 'str',
        'to_account': 'str',
        'amount': 'str',
        'symbol': 'str',
        'qty': 'str'
    }

    attribute_map = {
        'entry_type': 'entry_type',
        'from_account': 'from_account',
        'to_account': 'to_account',
        'amount': 'amount',
        'symbol': 'symbol',
        'qty': 'qty'
    }

    def __init__(self, entry_type=None, from_account=None, to_account=None, amount=None, symbol=None, qty=None):  # noqa: E501
        """JournalData - a model defined in Swagger"""  # noqa: E501
        self._entry_type = None
        self._from_account = None
        self._to_account = None
        self._amount = None
        self._symbol = None
        self._qty = None
        self.discriminator = None
        self.entry_type = entry_type
        self.from_account = from_account
        self.to_account = to_account
        if amount is not None:
            self.amount = amount
        if symbol is not None:
            self.symbol = symbol
        if qty is not None:
            self.qty = qty

    @property
    def entry_type(self):
        """Gets the entry_type of this JournalData.  # noqa: E501


        :return: The entry_type of this JournalData.  # noqa: E501
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this JournalData.


        :param entry_type: The entry_type of this JournalData.  # noqa: E501
        :type: str
        """
        if entry_type is None:
            raise ValueError("Invalid value for `entry_type`, must not be `None`")  # noqa: E501
        allowed_values = ["JNLC", "JNLS"]  # noqa: E501
        if entry_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entry_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entry_type, allowed_values)
            )

        self._entry_type = entry_type

    @property
    def from_account(self):
        """Gets the from_account of this JournalData.  # noqa: E501


        :return: The from_account of this JournalData.  # noqa: E501
        :rtype: str
        """
        return self._from_account

    @from_account.setter
    def from_account(self, from_account):
        """Sets the from_account of this JournalData.


        :param from_account: The from_account of this JournalData.  # noqa: E501
        :type: str
        """
        if from_account is None:
            raise ValueError("Invalid value for `from_account`, must not be `None`")  # noqa: E501

        self._from_account = from_account

    @property
    def to_account(self):
        """Gets the to_account of this JournalData.  # noqa: E501


        :return: The to_account of this JournalData.  # noqa: E501
        :rtype: str
        """
        return self._to_account

    @to_account.setter
    def to_account(self, to_account):
        """Sets the to_account of this JournalData.


        :param to_account: The to_account of this JournalData.  # noqa: E501
        :type: str
        """
        if to_account is None:
            raise ValueError("Invalid value for `to_account`, must not be `None`")  # noqa: E501

        self._to_account = to_account

    @property
    def amount(self):
        """Gets the amount of this JournalData.  # noqa: E501

        Required for JNLC. The dollar amount to move. It has to be a positive value.   # noqa: E501

        :return: The amount of this JournalData.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this JournalData.

        Required for JNLC. The dollar amount to move. It has to be a positive value.   # noqa: E501

        :param amount: The amount of this JournalData.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def symbol(self):
        """Gets the symbol of this JournalData.  # noqa: E501

        Required for JNLS.   # noqa: E501

        :return: The symbol of this JournalData.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this JournalData.

        Required for JNLS.   # noqa: E501

        :param symbol: The symbol of this JournalData.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def qty(self):
        """Gets the qty of this JournalData.  # noqa: E501

        Required for JNLS. The number of shares to move. It has to be a positive value.   # noqa: E501

        :return: The qty of this JournalData.  # noqa: E501
        :rtype: str
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this JournalData.

        Required for JNLS. The number of shares to move. It has to be a positive value.   # noqa: E501

        :param qty: The qty of this JournalData.  # noqa: E501
        :type: str
        """

        self._qty = qty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JournalData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JournalData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
