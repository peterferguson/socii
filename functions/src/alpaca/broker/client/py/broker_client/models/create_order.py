# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'qty': 'str',
        'notional': 'str',
        'side': 'str',
        'type': 'str',
        'time_in_force': 'str',
        'limit_price': 'str',
        'stop_price': 'str',
        'trail_price': 'str',
        'trail_percent': 'str',
        'extended_hours': 'bool',
        'client_order_id': 'str',
        'order_class': 'str',
        'take_profit': 'CreateOrderTakeProfit',
        'stop_loss': 'CreateOrderStopLoss',
        'commission': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'qty': 'qty',
        'notional': 'notional',
        'side': 'side',
        'type': 'type',
        'time_in_force': 'time_in_force',
        'limit_price': 'limit_price',
        'stop_price': 'stop_price',
        'trail_price': 'trail_price',
        'trail_percent': 'trail_percent',
        'extended_hours': 'extended_hours',
        'client_order_id': 'client_order_id',
        'order_class': 'order_class',
        'take_profit': 'take_profit',
        'stop_loss': 'stop_loss',
        'commission': 'commission'
    }

    def __init__(self, symbol=None, qty=None, notional=None, side=None, type=None, time_in_force=None, limit_price=None, stop_price=None, trail_price=None, trail_percent=None, extended_hours=None, client_order_id=None, order_class=None, take_profit=None, stop_loss=None, commission=None):  # noqa: E501
        """CreateOrder - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._qty = None
        self._notional = None
        self._side = None
        self._type = None
        self._time_in_force = None
        self._limit_price = None
        self._stop_price = None
        self._trail_price = None
        self._trail_percent = None
        self._extended_hours = None
        self._client_order_id = None
        self._order_class = None
        self._take_profit = None
        self._stop_loss = None
        self._commission = None
        self.discriminator = None
        self.symbol = symbol
        if qty is not None:
            self.qty = qty
        if notional is not None:
            self.notional = notional
        self.side = side
        self.type = type
        self.time_in_force = time_in_force
        if limit_price is not None:
            self.limit_price = limit_price
        if stop_price is not None:
            self.stop_price = stop_price
        if trail_price is not None:
            self.trail_price = trail_price
        if trail_percent is not None:
            self.trail_percent = trail_percent
        if extended_hours is not None:
            self.extended_hours = extended_hours
        if client_order_id is not None:
            self.client_order_id = client_order_id
        if order_class is not None:
            self.order_class = order_class
        if take_profit is not None:
            self.take_profit = take_profit
        if stop_loss is not None:
            self.stop_loss = stop_loss
        if commission is not None:
            self.commission = commission

    @property
    def symbol(self):
        """Gets the symbol of this CreateOrder.  # noqa: E501


        :return: The symbol of this CreateOrder.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this CreateOrder.


        :param symbol: The symbol of this CreateOrder.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def qty(self):
        """Gets the qty of this CreateOrder.  # noqa: E501


        :return: The qty of this CreateOrder.  # noqa: E501
        :rtype: str
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this CreateOrder.


        :param qty: The qty of this CreateOrder.  # noqa: E501
        :type: str
        """

        self._qty = qty

    @property
    def notional(self):
        """Gets the notional of this CreateOrder.  # noqa: E501


        :return: The notional of this CreateOrder.  # noqa: E501
        :rtype: str
        """
        return self._notional

    @notional.setter
    def notional(self, notional):
        """Sets the notional of this CreateOrder.


        :param notional: The notional of this CreateOrder.  # noqa: E501
        :type: str
        """

        self._notional = notional

    @property
    def side(self):
        """Gets the side of this CreateOrder.  # noqa: E501


        :return: The side of this CreateOrder.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this CreateOrder.


        :param side: The side of this CreateOrder.  # noqa: E501
        :type: str
        """
        if side is None:
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501
        allowed_values = ["buy", "sell"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"  # noqa: E501
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def type(self):
        """Gets the type of this CreateOrder.  # noqa: E501


        :return: The type of this CreateOrder.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateOrder.


        :param type: The type of this CreateOrder.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["market", "limit", "stop", "stop_limit", "trailing_stop"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def time_in_force(self):
        """Gets the time_in_force of this CreateOrder.  # noqa: E501


        :return: The time_in_force of this CreateOrder.  # noqa: E501
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this CreateOrder.


        :param time_in_force: The time_in_force of this CreateOrder.  # noqa: E501
        :type: str
        """
        if time_in_force is None:
            raise ValueError("Invalid value for `time_in_force`, must not be `None`")  # noqa: E501
        allowed_values = ["day", "gtc", "opg", "cls", "ioc", "fok"]  # noqa: E501
        if time_in_force not in allowed_values:
            raise ValueError(
                "Invalid value for `time_in_force` ({0}), must be one of {1}"  # noqa: E501
                .format(time_in_force, allowed_values)
            )

        self._time_in_force = time_in_force

    @property
    def limit_price(self):
        """Gets the limit_price of this CreateOrder.  # noqa: E501


        :return: The limit_price of this CreateOrder.  # noqa: E501
        :rtype: str
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this CreateOrder.


        :param limit_price: The limit_price of this CreateOrder.  # noqa: E501
        :type: str
        """

        self._limit_price = limit_price

    @property
    def stop_price(self):
        """Gets the stop_price of this CreateOrder.  # noqa: E501


        :return: The stop_price of this CreateOrder.  # noqa: E501
        :rtype: str
        """
        return self._stop_price

    @stop_price.setter
    def stop_price(self, stop_price):
        """Sets the stop_price of this CreateOrder.


        :param stop_price: The stop_price of this CreateOrder.  # noqa: E501
        :type: str
        """

        self._stop_price = stop_price

    @property
    def trail_price(self):
        """Gets the trail_price of this CreateOrder.  # noqa: E501


        :return: The trail_price of this CreateOrder.  # noqa: E501
        :rtype: str
        """
        return self._trail_price

    @trail_price.setter
    def trail_price(self, trail_price):
        """Sets the trail_price of this CreateOrder.


        :param trail_price: The trail_price of this CreateOrder.  # noqa: E501
        :type: str
        """

        self._trail_price = trail_price

    @property
    def trail_percent(self):
        """Gets the trail_percent of this CreateOrder.  # noqa: E501


        :return: The trail_percent of this CreateOrder.  # noqa: E501
        :rtype: str
        """
        return self._trail_percent

    @trail_percent.setter
    def trail_percent(self, trail_percent):
        """Sets the trail_percent of this CreateOrder.


        :param trail_percent: The trail_percent of this CreateOrder.  # noqa: E501
        :type: str
        """

        self._trail_percent = trail_percent

    @property
    def extended_hours(self):
        """Gets the extended_hours of this CreateOrder.  # noqa: E501


        :return: The extended_hours of this CreateOrder.  # noqa: E501
        :rtype: bool
        """
        return self._extended_hours

    @extended_hours.setter
    def extended_hours(self, extended_hours):
        """Sets the extended_hours of this CreateOrder.


        :param extended_hours: The extended_hours of this CreateOrder.  # noqa: E501
        :type: bool
        """

        self._extended_hours = extended_hours

    @property
    def client_order_id(self):
        """Gets the client_order_id of this CreateOrder.  # noqa: E501


        :return: The client_order_id of this CreateOrder.  # noqa: E501
        :rtype: str
        """
        return self._client_order_id

    @client_order_id.setter
    def client_order_id(self, client_order_id):
        """Sets the client_order_id of this CreateOrder.


        :param client_order_id: The client_order_id of this CreateOrder.  # noqa: E501
        :type: str
        """

        self._client_order_id = client_order_id

    @property
    def order_class(self):
        """Gets the order_class of this CreateOrder.  # noqa: E501


        :return: The order_class of this CreateOrder.  # noqa: E501
        :rtype: str
        """
        return self._order_class

    @order_class.setter
    def order_class(self, order_class):
        """Sets the order_class of this CreateOrder.


        :param order_class: The order_class of this CreateOrder.  # noqa: E501
        :type: str
        """
        allowed_values = ["simple", "bracket", "oco", "oto"]  # noqa: E501
        if order_class not in allowed_values:
            raise ValueError(
                "Invalid value for `order_class` ({0}), must be one of {1}"  # noqa: E501
                .format(order_class, allowed_values)
            )

        self._order_class = order_class

    @property
    def take_profit(self):
        """Gets the take_profit of this CreateOrder.  # noqa: E501


        :return: The take_profit of this CreateOrder.  # noqa: E501
        :rtype: CreateOrderTakeProfit
        """
        return self._take_profit

    @take_profit.setter
    def take_profit(self, take_profit):
        """Sets the take_profit of this CreateOrder.


        :param take_profit: The take_profit of this CreateOrder.  # noqa: E501
        :type: CreateOrderTakeProfit
        """

        self._take_profit = take_profit

    @property
    def stop_loss(self):
        """Gets the stop_loss of this CreateOrder.  # noqa: E501


        :return: The stop_loss of this CreateOrder.  # noqa: E501
        :rtype: CreateOrderStopLoss
        """
        return self._stop_loss

    @stop_loss.setter
    def stop_loss(self, stop_loss):
        """Sets the stop_loss of this CreateOrder.


        :param stop_loss: The stop_loss of this CreateOrder.  # noqa: E501
        :type: CreateOrderStopLoss
        """

        self._stop_loss = stop_loss

    @property
    def commission(self):
        """Gets the commission of this CreateOrder.  # noqa: E501


        :return: The commission of this CreateOrder.  # noqa: E501
        :rtype: str
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this CreateOrder.


        :param commission: The commission of this CreateOrder.  # noqa: E501
        :type: str
        """

        self._commission = commission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
