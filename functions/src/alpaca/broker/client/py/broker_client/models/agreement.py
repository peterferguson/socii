# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Agreement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agreement': 'str',
        'signed_at': 'str',
        'ip_address': 'str'
    }

    attribute_map = {
        'agreement': 'agreement',
        'signed_at': 'signed_at',
        'ip_address': 'ip_address'
    }

    def __init__(self, agreement=None, signed_at=None, ip_address=None):  # noqa: E501
        """Agreement - a model defined in Swagger"""  # noqa: E501
        self._agreement = None
        self._signed_at = None
        self._ip_address = None
        self.discriminator = None
        self.agreement = agreement
        self.signed_at = signed_at
        self.ip_address = ip_address

    @property
    def agreement(self):
        """Gets the agreement of this Agreement.  # noqa: E501

        - margin_agreement: Alpaca Margin Agreement - account_agreement: Alpaca Account Agreement - customer_agreement: Alpaca Customer Agreement   # noqa: E501

        :return: The agreement of this Agreement.  # noqa: E501
        :rtype: str
        """
        return self._agreement

    @agreement.setter
    def agreement(self, agreement):
        """Sets the agreement of this Agreement.

        - margin_agreement: Alpaca Margin Agreement - account_agreement: Alpaca Account Agreement - customer_agreement: Alpaca Customer Agreement   # noqa: E501

        :param agreement: The agreement of this Agreement.  # noqa: E501
        :type: str
        """
        if agreement is None:
            raise ValueError("Invalid value for `agreement`, must not be `None`")  # noqa: E501
        allowed_values = ["margin_agreement", "account_agreement", "customer_agreement"]  # noqa: E501
        if agreement not in allowed_values:
            raise ValueError(
                "Invalid value for `agreement` ({0}), must be one of {1}"  # noqa: E501
                .format(agreement, allowed_values)
            )

        self._agreement = agreement

    @property
    def signed_at(self):
        """Gets the signed_at of this Agreement.  # noqa: E501


        :return: The signed_at of this Agreement.  # noqa: E501
        :rtype: str
        """
        return self._signed_at

    @signed_at.setter
    def signed_at(self, signed_at):
        """Sets the signed_at of this Agreement.


        :param signed_at: The signed_at of this Agreement.  # noqa: E501
        :type: str
        """
        if signed_at is None:
            raise ValueError("Invalid value for `signed_at`, must not be `None`")  # noqa: E501

        self._signed_at = signed_at

    @property
    def ip_address(self):
        """Gets the ip_address of this Agreement.  # noqa: E501


        :return: The ip_address of this Agreement.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Agreement.


        :param ip_address: The ip_address of this Agreement.  # noqa: E501
        :type: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Agreement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Agreement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
