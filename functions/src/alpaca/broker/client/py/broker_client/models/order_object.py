# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'client_order_id': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'submitted_at': 'datetime',
        'filled_at': 'datetime',
        'expired_at': 'datetime',
        'canceled_at': 'datetime',
        'failed_at': 'datetime',
        'replaced_at': 'datetime',
        'replaced_by': 'str',
        'replaces': 'str',
        'asset_id': 'str',
        'symbol': 'str',
        'asset_class': 'str',
        'notional': 'str',
        'qty': 'str',
        'filled_qty': 'str',
        'filled_avg_price': 'str',
        'order_class': 'str',
        'order_type': 'str',
        'type': 'str',
        'side': 'str',
        'time_in_force': 'str',
        'limit_price': 'str',
        'stop_price': 'str',
        'status': 'str',
        'extended_hours': 'bool',
        'legs': 'list[OrderObject]',
        'trail_price': 'str',
        'trail_percent': 'str',
        'hwm': 'str',
        'commission': 'str'
    }

    attribute_map = {
        'id': 'id',
        'client_order_id': 'client_order_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'submitted_at': 'submitted_at',
        'filled_at': 'filled_at',
        'expired_at': 'expired_at',
        'canceled_at': 'canceled_at',
        'failed_at': 'failed_at',
        'replaced_at': 'replaced_at',
        'replaced_by': 'replaced_by',
        'replaces': 'replaces',
        'asset_id': 'asset_id',
        'symbol': 'symbol',
        'asset_class': 'asset_class',
        'notional': 'notional',
        'qty': 'qty',
        'filled_qty': 'filled_qty',
        'filled_avg_price': 'filled_avg_price',
        'order_class': 'order_class',
        'order_type': 'order_type',
        'type': 'type',
        'side': 'side',
        'time_in_force': 'time_in_force',
        'limit_price': 'limit_price',
        'stop_price': 'stop_price',
        'status': 'status',
        'extended_hours': 'extended_hours',
        'legs': 'legs',
        'trail_price': 'trail_price',
        'trail_percent': 'trail_percent',
        'hwm': 'hwm',
        'commission': 'commission'
    }

    def __init__(self, id=None, client_order_id=None, created_at=None, updated_at=None, submitted_at=None, filled_at=None, expired_at=None, canceled_at=None, failed_at=None, replaced_at=None, replaced_by=None, replaces=None, asset_id=None, symbol=None, asset_class=None, notional=None, qty=None, filled_qty=None, filled_avg_price=None, order_class=None, order_type=None, type=None, side=None, time_in_force=None, limit_price=None, stop_price=None, status=None, extended_hours=None, legs=None, trail_price=None, trail_percent=None, hwm=None, commission=None):  # noqa: E501
        """OrderObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._client_order_id = None
        self._created_at = None
        self._updated_at = None
        self._submitted_at = None
        self._filled_at = None
        self._expired_at = None
        self._canceled_at = None
        self._failed_at = None
        self._replaced_at = None
        self._replaced_by = None
        self._replaces = None
        self._asset_id = None
        self._symbol = None
        self._asset_class = None
        self._notional = None
        self._qty = None
        self._filled_qty = None
        self._filled_avg_price = None
        self._order_class = None
        self._order_type = None
        self._type = None
        self._side = None
        self._time_in_force = None
        self._limit_price = None
        self._stop_price = None
        self._status = None
        self._extended_hours = None
        self._legs = None
        self._trail_price = None
        self._trail_percent = None
        self._hwm = None
        self._commission = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if client_order_id is not None:
            self.client_order_id = client_order_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if submitted_at is not None:
            self.submitted_at = submitted_at
        if filled_at is not None:
            self.filled_at = filled_at
        if expired_at is not None:
            self.expired_at = expired_at
        if canceled_at is not None:
            self.canceled_at = canceled_at
        if failed_at is not None:
            self.failed_at = failed_at
        if replaced_at is not None:
            self.replaced_at = replaced_at
        if replaced_by is not None:
            self.replaced_by = replaced_by
        if replaces is not None:
            self.replaces = replaces
        if asset_id is not None:
            self.asset_id = asset_id
        if symbol is not None:
            self.symbol = symbol
        if asset_class is not None:
            self.asset_class = asset_class
        if notional is not None:
            self.notional = notional
        if qty is not None:
            self.qty = qty
        if filled_qty is not None:
            self.filled_qty = filled_qty
        if filled_avg_price is not None:
            self.filled_avg_price = filled_avg_price
        if order_class is not None:
            self.order_class = order_class
        if order_type is not None:
            self.order_type = order_type
        if type is not None:
            self.type = type
        if side is not None:
            self.side = side
        if time_in_force is not None:
            self.time_in_force = time_in_force
        if limit_price is not None:
            self.limit_price = limit_price
        if stop_price is not None:
            self.stop_price = stop_price
        if status is not None:
            self.status = status
        if extended_hours is not None:
            self.extended_hours = extended_hours
        if legs is not None:
            self.legs = legs
        if trail_price is not None:
            self.trail_price = trail_price
        if trail_percent is not None:
            self.trail_percent = trail_percent
        if hwm is not None:
            self.hwm = hwm
        if commission is not None:
            self.commission = commission

    @property
    def id(self):
        """Gets the id of this OrderObject.  # noqa: E501


        :return: The id of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderObject.


        :param id: The id of this OrderObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_order_id(self):
        """Gets the client_order_id of this OrderObject.  # noqa: E501


        :return: The client_order_id of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._client_order_id

    @client_order_id.setter
    def client_order_id(self, client_order_id):
        """Sets the client_order_id of this OrderObject.


        :param client_order_id: The client_order_id of this OrderObject.  # noqa: E501
        :type: str
        """

        self._client_order_id = client_order_id

    @property
    def created_at(self):
        """Gets the created_at of this OrderObject.  # noqa: E501


        :return: The created_at of this OrderObject.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OrderObject.


        :param created_at: The created_at of this OrderObject.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this OrderObject.  # noqa: E501


        :return: The updated_at of this OrderObject.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OrderObject.


        :param updated_at: The updated_at of this OrderObject.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def submitted_at(self):
        """Gets the submitted_at of this OrderObject.  # noqa: E501


        :return: The submitted_at of this OrderObject.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this OrderObject.


        :param submitted_at: The submitted_at of this OrderObject.  # noqa: E501
        :type: datetime
        """

        self._submitted_at = submitted_at

    @property
    def filled_at(self):
        """Gets the filled_at of this OrderObject.  # noqa: E501


        :return: The filled_at of this OrderObject.  # noqa: E501
        :rtype: datetime
        """
        return self._filled_at

    @filled_at.setter
    def filled_at(self, filled_at):
        """Sets the filled_at of this OrderObject.


        :param filled_at: The filled_at of this OrderObject.  # noqa: E501
        :type: datetime
        """

        self._filled_at = filled_at

    @property
    def expired_at(self):
        """Gets the expired_at of this OrderObject.  # noqa: E501


        :return: The expired_at of this OrderObject.  # noqa: E501
        :rtype: datetime
        """
        return self._expired_at

    @expired_at.setter
    def expired_at(self, expired_at):
        """Sets the expired_at of this OrderObject.


        :param expired_at: The expired_at of this OrderObject.  # noqa: E501
        :type: datetime
        """

        self._expired_at = expired_at

    @property
    def canceled_at(self):
        """Gets the canceled_at of this OrderObject.  # noqa: E501


        :return: The canceled_at of this OrderObject.  # noqa: E501
        :rtype: datetime
        """
        return self._canceled_at

    @canceled_at.setter
    def canceled_at(self, canceled_at):
        """Sets the canceled_at of this OrderObject.


        :param canceled_at: The canceled_at of this OrderObject.  # noqa: E501
        :type: datetime
        """

        self._canceled_at = canceled_at

    @property
    def failed_at(self):
        """Gets the failed_at of this OrderObject.  # noqa: E501


        :return: The failed_at of this OrderObject.  # noqa: E501
        :rtype: datetime
        """
        return self._failed_at

    @failed_at.setter
    def failed_at(self, failed_at):
        """Sets the failed_at of this OrderObject.


        :param failed_at: The failed_at of this OrderObject.  # noqa: E501
        :type: datetime
        """

        self._failed_at = failed_at

    @property
    def replaced_at(self):
        """Gets the replaced_at of this OrderObject.  # noqa: E501


        :return: The replaced_at of this OrderObject.  # noqa: E501
        :rtype: datetime
        """
        return self._replaced_at

    @replaced_at.setter
    def replaced_at(self, replaced_at):
        """Sets the replaced_at of this OrderObject.


        :param replaced_at: The replaced_at of this OrderObject.  # noqa: E501
        :type: datetime
        """

        self._replaced_at = replaced_at

    @property
    def replaced_by(self):
        """Gets the replaced_by of this OrderObject.  # noqa: E501


        :return: The replaced_by of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._replaced_by

    @replaced_by.setter
    def replaced_by(self, replaced_by):
        """Sets the replaced_by of this OrderObject.


        :param replaced_by: The replaced_by of this OrderObject.  # noqa: E501
        :type: str
        """

        self._replaced_by = replaced_by

    @property
    def replaces(self):
        """Gets the replaces of this OrderObject.  # noqa: E501


        :return: The replaces of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._replaces

    @replaces.setter
    def replaces(self, replaces):
        """Sets the replaces of this OrderObject.


        :param replaces: The replaces of this OrderObject.  # noqa: E501
        :type: str
        """

        self._replaces = replaces

    @property
    def asset_id(self):
        """Gets the asset_id of this OrderObject.  # noqa: E501


        :return: The asset_id of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this OrderObject.


        :param asset_id: The asset_id of this OrderObject.  # noqa: E501
        :type: str
        """

        self._asset_id = asset_id

    @property
    def symbol(self):
        """Gets the symbol of this OrderObject.  # noqa: E501


        :return: The symbol of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this OrderObject.


        :param symbol: The symbol of this OrderObject.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def asset_class(self):
        """Gets the asset_class of this OrderObject.  # noqa: E501


        :return: The asset_class of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._asset_class

    @asset_class.setter
    def asset_class(self, asset_class):
        """Sets the asset_class of this OrderObject.


        :param asset_class: The asset_class of this OrderObject.  # noqa: E501
        :type: str
        """

        self._asset_class = asset_class

    @property
    def notional(self):
        """Gets the notional of this OrderObject.  # noqa: E501


        :return: The notional of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._notional

    @notional.setter
    def notional(self, notional):
        """Sets the notional of this OrderObject.


        :param notional: The notional of this OrderObject.  # noqa: E501
        :type: str
        """

        self._notional = notional

    @property
    def qty(self):
        """Gets the qty of this OrderObject.  # noqa: E501


        :return: The qty of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this OrderObject.


        :param qty: The qty of this OrderObject.  # noqa: E501
        :type: str
        """

        self._qty = qty

    @property
    def filled_qty(self):
        """Gets the filled_qty of this OrderObject.  # noqa: E501


        :return: The filled_qty of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._filled_qty

    @filled_qty.setter
    def filled_qty(self, filled_qty):
        """Sets the filled_qty of this OrderObject.


        :param filled_qty: The filled_qty of this OrderObject.  # noqa: E501
        :type: str
        """

        self._filled_qty = filled_qty

    @property
    def filled_avg_price(self):
        """Gets the filled_avg_price of this OrderObject.  # noqa: E501


        :return: The filled_avg_price of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._filled_avg_price

    @filled_avg_price.setter
    def filled_avg_price(self, filled_avg_price):
        """Sets the filled_avg_price of this OrderObject.


        :param filled_avg_price: The filled_avg_price of this OrderObject.  # noqa: E501
        :type: str
        """

        self._filled_avg_price = filled_avg_price

    @property
    def order_class(self):
        """Gets the order_class of this OrderObject.  # noqa: E501


        :return: The order_class of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._order_class

    @order_class.setter
    def order_class(self, order_class):
        """Sets the order_class of this OrderObject.


        :param order_class: The order_class of this OrderObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["simple", "bracket", "oco", "oto"]  # noqa: E501
        if order_class not in allowed_values:
            raise ValueError(
                "Invalid value for `order_class` ({0}), must be one of {1}"  # noqa: E501
                .format(order_class, allowed_values)
            )

        self._order_class = order_class

    @property
    def order_type(self):
        """Gets the order_type of this OrderObject.  # noqa: E501


        :return: The order_type of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this OrderObject.


        :param order_type: The order_type of this OrderObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["market", "limit", "stop", "stop_limit", "trailing_stop"]  # noqa: E501
        if order_type not in allowed_values:
            raise ValueError(
                "Invalid value for `order_type` ({0}), must be one of {1}"  # noqa: E501
                .format(order_type, allowed_values)
            )

        self._order_type = order_type

    @property
    def type(self):
        """Gets the type of this OrderObject.  # noqa: E501


        :return: The type of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderObject.


        :param type: The type of this OrderObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["market", "limit", "stop", "stop_limit", "trailing_stop"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def side(self):
        """Gets the side of this OrderObject.  # noqa: E501


        :return: The side of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this OrderObject.


        :param side: The side of this OrderObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["buy", "sell"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"  # noqa: E501
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def time_in_force(self):
        """Gets the time_in_force of this OrderObject.  # noqa: E501


        :return: The time_in_force of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this OrderObject.


        :param time_in_force: The time_in_force of this OrderObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["day", "gtc", "opg", "cls", "ioc", "fok"]  # noqa: E501
        if time_in_force not in allowed_values:
            raise ValueError(
                "Invalid value for `time_in_force` ({0}), must be one of {1}"  # noqa: E501
                .format(time_in_force, allowed_values)
            )

        self._time_in_force = time_in_force

    @property
    def limit_price(self):
        """Gets the limit_price of this OrderObject.  # noqa: E501


        :return: The limit_price of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._limit_price

    @limit_price.setter
    def limit_price(self, limit_price):
        """Sets the limit_price of this OrderObject.


        :param limit_price: The limit_price of this OrderObject.  # noqa: E501
        :type: str
        """

        self._limit_price = limit_price

    @property
    def stop_price(self):
        """Gets the stop_price of this OrderObject.  # noqa: E501


        :return: The stop_price of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._stop_price

    @stop_price.setter
    def stop_price(self, stop_price):
        """Sets the stop_price of this OrderObject.


        :param stop_price: The stop_price of this OrderObject.  # noqa: E501
        :type: str
        """

        self._stop_price = stop_price

    @property
    def status(self):
        """Gets the status of this OrderObject.  # noqa: E501


        :return: The status of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderObject.


        :param status: The status of this OrderObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["new", "partially_filled", "filled", "done_for_day", "canceled", "expired", "replaced", "pending_cancel", "pending_replace", "accepted", "pending_new", "accepted_for_bidding", "stopped", "rejected", "suspended", "calculated"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def extended_hours(self):
        """Gets the extended_hours of this OrderObject.  # noqa: E501


        :return: The extended_hours of this OrderObject.  # noqa: E501
        :rtype: bool
        """
        return self._extended_hours

    @extended_hours.setter
    def extended_hours(self, extended_hours):
        """Sets the extended_hours of this OrderObject.


        :param extended_hours: The extended_hours of this OrderObject.  # noqa: E501
        :type: bool
        """

        self._extended_hours = extended_hours

    @property
    def legs(self):
        """Gets the legs of this OrderObject.  # noqa: E501


        :return: The legs of this OrderObject.  # noqa: E501
        :rtype: list[OrderObject]
        """
        return self._legs

    @legs.setter
    def legs(self, legs):
        """Sets the legs of this OrderObject.


        :param legs: The legs of this OrderObject.  # noqa: E501
        :type: list[OrderObject]
        """

        self._legs = legs

    @property
    def trail_price(self):
        """Gets the trail_price of this OrderObject.  # noqa: E501


        :return: The trail_price of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._trail_price

    @trail_price.setter
    def trail_price(self, trail_price):
        """Sets the trail_price of this OrderObject.


        :param trail_price: The trail_price of this OrderObject.  # noqa: E501
        :type: str
        """

        self._trail_price = trail_price

    @property
    def trail_percent(self):
        """Gets the trail_percent of this OrderObject.  # noqa: E501


        :return: The trail_percent of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._trail_percent

    @trail_percent.setter
    def trail_percent(self, trail_percent):
        """Sets the trail_percent of this OrderObject.


        :param trail_percent: The trail_percent of this OrderObject.  # noqa: E501
        :type: str
        """

        self._trail_percent = trail_percent

    @property
    def hwm(self):
        """Gets the hwm of this OrderObject.  # noqa: E501


        :return: The hwm of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._hwm

    @hwm.setter
    def hwm(self, hwm):
        """Sets the hwm of this OrderObject.


        :param hwm: The hwm of this OrderObject.  # noqa: E501
        :type: str
        """

        self._hwm = hwm

    @property
    def commission(self):
        """Gets the commission of this OrderObject.  # noqa: E501


        :return: The commission of this OrderObject.  # noqa: E501
        :rtype: str
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this OrderObject.


        :param commission: The commission of this OrderObject.  # noqa: E501
        :type: str
        """

        self._commission = commission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
