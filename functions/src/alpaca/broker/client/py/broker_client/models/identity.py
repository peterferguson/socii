# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Identity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'given_name': 'str',
        'family_name': 'str',
        'date_of_birth': 'date',
        'tax_id': 'str',
        'tax_id_type': 'str',
        'country_of_citizenship': 'str',
        'country_of_birth': 'str',
        'country_of_tax_residence': 'str',
        'funding_source': 'list[str]',
        'annual_income_min': 'float',
        'annual_income_max': 'float',
        'liquid_net_worth_min': 'float',
        'liquid_net_worth_max': 'float',
        'total_net_worth_min': 'float',
        'total_net_worth_max': 'float',
        'extra': 'object'
    }

    attribute_map = {
        'given_name': 'given_name',
        'family_name': 'family_name',
        'date_of_birth': 'date_of_birth',
        'tax_id': 'tax_id',
        'tax_id_type': 'tax_id_type',
        'country_of_citizenship': 'country_of_citizenship',
        'country_of_birth': 'country_of_birth',
        'country_of_tax_residence': 'country_of_tax_residence',
        'funding_source': 'funding_source',
        'annual_income_min': 'annual_income_min',
        'annual_income_max': 'annual_income_max',
        'liquid_net_worth_min': 'liquid_net_worth_min',
        'liquid_net_worth_max': 'liquid_net_worth_max',
        'total_net_worth_min': 'total_net_worth_min',
        'total_net_worth_max': 'total_net_worth_max',
        'extra': 'extra'
    }

    def __init__(self, given_name=None, family_name=None, date_of_birth=None, tax_id=None, tax_id_type=None, country_of_citizenship=None, country_of_birth=None, country_of_tax_residence=None, funding_source=None, annual_income_min=None, annual_income_max=None, liquid_net_worth_min=None, liquid_net_worth_max=None, total_net_worth_min=None, total_net_worth_max=None, extra=None):  # noqa: E501
        """Identity - a model defined in Swagger"""  # noqa: E501
        self._given_name = None
        self._family_name = None
        self._date_of_birth = None
        self._tax_id = None
        self._tax_id_type = None
        self._country_of_citizenship = None
        self._country_of_birth = None
        self._country_of_tax_residence = None
        self._funding_source = None
        self._annual_income_min = None
        self._annual_income_max = None
        self._liquid_net_worth_min = None
        self._liquid_net_worth_max = None
        self._total_net_worth_min = None
        self._total_net_worth_max = None
        self._extra = None
        self.discriminator = None
        self.given_name = given_name
        self.family_name = family_name
        self.date_of_birth = date_of_birth
        if tax_id is not None:
            self.tax_id = tax_id
        if tax_id_type is not None:
            self.tax_id_type = tax_id_type
        if country_of_citizenship is not None:
            self.country_of_citizenship = country_of_citizenship
        if country_of_birth is not None:
            self.country_of_birth = country_of_birth
        self.country_of_tax_residence = country_of_tax_residence
        self.funding_source = funding_source
        if annual_income_min is not None:
            self.annual_income_min = annual_income_min
        if annual_income_max is not None:
            self.annual_income_max = annual_income_max
        if liquid_net_worth_min is not None:
            self.liquid_net_worth_min = liquid_net_worth_min
        if liquid_net_worth_max is not None:
            self.liquid_net_worth_max = liquid_net_worth_max
        if total_net_worth_min is not None:
            self.total_net_worth_min = total_net_worth_min
        if total_net_worth_max is not None:
            self.total_net_worth_max = total_net_worth_max
        if extra is not None:
            self.extra = extra

    @property
    def given_name(self):
        """Gets the given_name of this Identity.  # noqa: E501


        :return: The given_name of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Identity.


        :param given_name: The given_name of this Identity.  # noqa: E501
        :type: str
        """
        if given_name is None:
            raise ValueError("Invalid value for `given_name`, must not be `None`")  # noqa: E501

        self._given_name = given_name

    @property
    def family_name(self):
        """Gets the family_name of this Identity.  # noqa: E501


        :return: The family_name of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this Identity.


        :param family_name: The family_name of this Identity.  # noqa: E501
        :type: str
        """
        if family_name is None:
            raise ValueError("Invalid value for `family_name`, must not be `None`")  # noqa: E501

        self._family_name = family_name

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Identity.  # noqa: E501


        :return: The date_of_birth of this Identity.  # noqa: E501
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Identity.


        :param date_of_birth: The date_of_birth of this Identity.  # noqa: E501
        :type: date
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")  # noqa: E501

        self._date_of_birth = date_of_birth

    @property
    def tax_id(self):
        """Gets the tax_id of this Identity.  # noqa: E501


        :return: The tax_id of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this Identity.


        :param tax_id: The tax_id of this Identity.  # noqa: E501
        :type: str
        """

        self._tax_id = tax_id

    @property
    def tax_id_type(self):
        """Gets the tax_id_type of this Identity.  # noqa: E501


        :return: The tax_id_type of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._tax_id_type

    @tax_id_type.setter
    def tax_id_type(self, tax_id_type):
        """Sets the tax_id_type of this Identity.


        :param tax_id_type: The tax_id_type of this Identity.  # noqa: E501
        :type: str
        """
        allowed_values = ["USA_SSN", "AUS_TFN", "AUS_ABN", "DEU_TAX_ID", "FRA_SPI", "GBR_UTR", "GBR_NINO", "HUN_TIN", "IND_PAN", "ISR_TAX_ID", "ITA_TAX_ID", "JPN_TAX_ID", "NLD_TIN", "SGP_NRIC", "SGP_FIN", "SGP_ASGD", "SGP_ITR", "SWE_TAX_ID", "NOT_SPECIFIED"]  # noqa: E501
        if tax_id_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_id_type` ({0}), must be one of {1}"  # noqa: E501
                .format(tax_id_type, allowed_values)
            )

        self._tax_id_type = tax_id_type

    @property
    def country_of_citizenship(self):
        """Gets the country_of_citizenship of this Identity.  # noqa: E501

        [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).   # noqa: E501

        :return: The country_of_citizenship of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._country_of_citizenship

    @country_of_citizenship.setter
    def country_of_citizenship(self, country_of_citizenship):
        """Sets the country_of_citizenship of this Identity.

        [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).   # noqa: E501

        :param country_of_citizenship: The country_of_citizenship of this Identity.  # noqa: E501
        :type: str
        """

        self._country_of_citizenship = country_of_citizenship

    @property
    def country_of_birth(self):
        """Gets the country_of_birth of this Identity.  # noqa: E501

        [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).   # noqa: E501

        :return: The country_of_birth of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._country_of_birth

    @country_of_birth.setter
    def country_of_birth(self, country_of_birth):
        """Sets the country_of_birth of this Identity.

        [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).   # noqa: E501

        :param country_of_birth: The country_of_birth of this Identity.  # noqa: E501
        :type: str
        """

        self._country_of_birth = country_of_birth

    @property
    def country_of_tax_residence(self):
        """Gets the country_of_tax_residence of this Identity.  # noqa: E501

        [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).   # noqa: E501

        :return: The country_of_tax_residence of this Identity.  # noqa: E501
        :rtype: str
        """
        return self._country_of_tax_residence

    @country_of_tax_residence.setter
    def country_of_tax_residence(self, country_of_tax_residence):
        """Sets the country_of_tax_residence of this Identity.

        [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).   # noqa: E501

        :param country_of_tax_residence: The country_of_tax_residence of this Identity.  # noqa: E501
        :type: str
        """
        if country_of_tax_residence is None:
            raise ValueError("Invalid value for `country_of_tax_residence`, must not be `None`")  # noqa: E501

        self._country_of_tax_residence = country_of_tax_residence

    @property
    def funding_source(self):
        """Gets the funding_source of this Identity.  # noqa: E501


        :return: The funding_source of this Identity.  # noqa: E501
        :rtype: list[str]
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this Identity.


        :param funding_source: The funding_source of this Identity.  # noqa: E501
        :type: list[str]
        """
        if funding_source is None:
            raise ValueError("Invalid value for `funding_source`, must not be `None`")  # noqa: E501
        allowed_values = ["employment_income", "investments", "inheritance", "business_income", "savings", "family"]  # noqa: E501
        if not set(funding_source).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `funding_source` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(funding_source) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._funding_source = funding_source

    @property
    def annual_income_min(self):
        """Gets the annual_income_min of this Identity.  # noqa: E501


        :return: The annual_income_min of this Identity.  # noqa: E501
        :rtype: float
        """
        return self._annual_income_min

    @annual_income_min.setter
    def annual_income_min(self, annual_income_min):
        """Sets the annual_income_min of this Identity.


        :param annual_income_min: The annual_income_min of this Identity.  # noqa: E501
        :type: float
        """

        self._annual_income_min = annual_income_min

    @property
    def annual_income_max(self):
        """Gets the annual_income_max of this Identity.  # noqa: E501


        :return: The annual_income_max of this Identity.  # noqa: E501
        :rtype: float
        """
        return self._annual_income_max

    @annual_income_max.setter
    def annual_income_max(self, annual_income_max):
        """Sets the annual_income_max of this Identity.


        :param annual_income_max: The annual_income_max of this Identity.  # noqa: E501
        :type: float
        """

        self._annual_income_max = annual_income_max

    @property
    def liquid_net_worth_min(self):
        """Gets the liquid_net_worth_min of this Identity.  # noqa: E501


        :return: The liquid_net_worth_min of this Identity.  # noqa: E501
        :rtype: float
        """
        return self._liquid_net_worth_min

    @liquid_net_worth_min.setter
    def liquid_net_worth_min(self, liquid_net_worth_min):
        """Sets the liquid_net_worth_min of this Identity.


        :param liquid_net_worth_min: The liquid_net_worth_min of this Identity.  # noqa: E501
        :type: float
        """

        self._liquid_net_worth_min = liquid_net_worth_min

    @property
    def liquid_net_worth_max(self):
        """Gets the liquid_net_worth_max of this Identity.  # noqa: E501


        :return: The liquid_net_worth_max of this Identity.  # noqa: E501
        :rtype: float
        """
        return self._liquid_net_worth_max

    @liquid_net_worth_max.setter
    def liquid_net_worth_max(self, liquid_net_worth_max):
        """Sets the liquid_net_worth_max of this Identity.


        :param liquid_net_worth_max: The liquid_net_worth_max of this Identity.  # noqa: E501
        :type: float
        """

        self._liquid_net_worth_max = liquid_net_worth_max

    @property
    def total_net_worth_min(self):
        """Gets the total_net_worth_min of this Identity.  # noqa: E501


        :return: The total_net_worth_min of this Identity.  # noqa: E501
        :rtype: float
        """
        return self._total_net_worth_min

    @total_net_worth_min.setter
    def total_net_worth_min(self, total_net_worth_min):
        """Sets the total_net_worth_min of this Identity.


        :param total_net_worth_min: The total_net_worth_min of this Identity.  # noqa: E501
        :type: float
        """

        self._total_net_worth_min = total_net_worth_min

    @property
    def total_net_worth_max(self):
        """Gets the total_net_worth_max of this Identity.  # noqa: E501


        :return: The total_net_worth_max of this Identity.  # noqa: E501
        :rtype: float
        """
        return self._total_net_worth_max

    @total_net_worth_max.setter
    def total_net_worth_max(self, total_net_worth_max):
        """Sets the total_net_worth_max of this Identity.


        :param total_net_worth_max: The total_net_worth_max of this Identity.  # noqa: E501
        :type: float
        """

        self._total_net_worth_max = total_net_worth_max

    @property
    def extra(self):
        """Gets the extra of this Identity.  # noqa: E501

        any extra information used for KYC purposes   # noqa: E501

        :return: The extra of this Identity.  # noqa: E501
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this Identity.

        any extra information used for KYC purposes   # noqa: E501

        :param extra: The extra of this Identity.  # noqa: E501
        :type: object
        """

        self._extra = extra

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Identity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Identity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
