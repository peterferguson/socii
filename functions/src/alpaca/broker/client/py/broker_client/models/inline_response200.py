# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'account_number': 'str',
        'status': 'AccountStatus',
        'currency': 'str',
        'buying_power': 'str',
        'regt_buying_power': 'str',
        'daytrading_buying_power': 'str',
        'cash': 'str',
        'cash_withdrawable': 'str',
        'cash_transferable': 'str',
        'pending_transfer_out': 'str',
        'portfolio_value': 'str',
        'pattern_day_trader': 'bool',
        'trading_blocked': 'bool',
        'transfers_blocked': 'bool',
        'account_blocked': 'bool',
        'created_at': 'str',
        'trade_suspended_by_user': 'bool',
        'multiplier': 'str',
        'shorting_enabled': 'bool',
        'equity': 'str',
        'last_equity': 'str',
        'long_market_value': 'str',
        'short_market_value': 'str',
        'initial_margin': 'str',
        'maintenance_margin': 'str',
        'last_maintenance_margin': 'str',
        'sma': 'str',
        'daytrade_count': 'int',
        'previous_close': 'str',
        'last_long_market_value': 'str',
        'last_short_market_value': 'str',
        'last_cash': 'str',
        'last_initial_margin': 'str',
        'last_regt_buying_power': 'str',
        'last_daytrading_buying_power': 'str',
        'last_buying_power': 'str',
        'last_daytrade_count': 'int',
        'clearing_broker': 'str'
    }

    attribute_map = {
        'id': 'id',
        'account_number': 'account_number',
        'status': 'status',
        'currency': 'currency',
        'buying_power': 'buying_power',
        'regt_buying_power': 'regt_buying_power',
        'daytrading_buying_power': 'daytrading_buying_power',
        'cash': 'cash',
        'cash_withdrawable': 'cash_withdrawable',
        'cash_transferable': 'cash_transferable',
        'pending_transfer_out': 'pending_transfer_out',
        'portfolio_value': 'portfolio_value',
        'pattern_day_trader': 'pattern_day_trader',
        'trading_blocked': 'trading_blocked',
        'transfers_blocked': 'transfers_blocked',
        'account_blocked': 'account_blocked',
        'created_at': 'created_at',
        'trade_suspended_by_user': 'trade_suspended_by_user',
        'multiplier': 'multiplier',
        'shorting_enabled': 'shorting_enabled',
        'equity': 'equity',
        'last_equity': 'last_equity',
        'long_market_value': 'long_market_value',
        'short_market_value': 'short_market_value',
        'initial_margin': 'initial_margin',
        'maintenance_margin': 'maintenance_margin',
        'last_maintenance_margin': 'last_maintenance_margin',
        'sma': 'sma',
        'daytrade_count': 'daytrade_count',
        'previous_close': 'previous_close',
        'last_long_market_value': 'last_long_market_value',
        'last_short_market_value': 'last_short_market_value',
        'last_cash': 'last_cash',
        'last_initial_margin': 'last_initial_margin',
        'last_regt_buying_power': 'last_regt_buying_power',
        'last_daytrading_buying_power': 'last_daytrading_buying_power',
        'last_buying_power': 'last_buying_power',
        'last_daytrade_count': 'last_daytrade_count',
        'clearing_broker': 'clearing_broker'
    }

    def __init__(self, id=None, account_number=None, status=None, currency=None, buying_power=None, regt_buying_power=None, daytrading_buying_power=None, cash=None, cash_withdrawable=None, cash_transferable=None, pending_transfer_out=None, portfolio_value=None, pattern_day_trader=None, trading_blocked=None, transfers_blocked=None, account_blocked=None, created_at=None, trade_suspended_by_user=None, multiplier=None, shorting_enabled=None, equity=None, last_equity=None, long_market_value=None, short_market_value=None, initial_margin=None, maintenance_margin=None, last_maintenance_margin=None, sma=None, daytrade_count=None, previous_close=None, last_long_market_value=None, last_short_market_value=None, last_cash=None, last_initial_margin=None, last_regt_buying_power=None, last_daytrading_buying_power=None, last_buying_power=None, last_daytrade_count=None, clearing_broker=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_number = None
        self._status = None
        self._currency = None
        self._buying_power = None
        self._regt_buying_power = None
        self._daytrading_buying_power = None
        self._cash = None
        self._cash_withdrawable = None
        self._cash_transferable = None
        self._pending_transfer_out = None
        self._portfolio_value = None
        self._pattern_day_trader = None
        self._trading_blocked = None
        self._transfers_blocked = None
        self._account_blocked = None
        self._created_at = None
        self._trade_suspended_by_user = None
        self._multiplier = None
        self._shorting_enabled = None
        self._equity = None
        self._last_equity = None
        self._long_market_value = None
        self._short_market_value = None
        self._initial_margin = None
        self._maintenance_margin = None
        self._last_maintenance_margin = None
        self._sma = None
        self._daytrade_count = None
        self._previous_close = None
        self._last_long_market_value = None
        self._last_short_market_value = None
        self._last_cash = None
        self._last_initial_margin = None
        self._last_regt_buying_power = None
        self._last_daytrading_buying_power = None
        self._last_buying_power = None
        self._last_daytrade_count = None
        self._clearing_broker = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if account_number is not None:
            self.account_number = account_number
        if status is not None:
            self.status = status
        if currency is not None:
            self.currency = currency
        if buying_power is not None:
            self.buying_power = buying_power
        if regt_buying_power is not None:
            self.regt_buying_power = regt_buying_power
        if daytrading_buying_power is not None:
            self.daytrading_buying_power = daytrading_buying_power
        if cash is not None:
            self.cash = cash
        if cash_withdrawable is not None:
            self.cash_withdrawable = cash_withdrawable
        if cash_transferable is not None:
            self.cash_transferable = cash_transferable
        if pending_transfer_out is not None:
            self.pending_transfer_out = pending_transfer_out
        if portfolio_value is not None:
            self.portfolio_value = portfolio_value
        if pattern_day_trader is not None:
            self.pattern_day_trader = pattern_day_trader
        if trading_blocked is not None:
            self.trading_blocked = trading_blocked
        if transfers_blocked is not None:
            self.transfers_blocked = transfers_blocked
        if account_blocked is not None:
            self.account_blocked = account_blocked
        if created_at is not None:
            self.created_at = created_at
        if trade_suspended_by_user is not None:
            self.trade_suspended_by_user = trade_suspended_by_user
        if multiplier is not None:
            self.multiplier = multiplier
        if shorting_enabled is not None:
            self.shorting_enabled = shorting_enabled
        if equity is not None:
            self.equity = equity
        if last_equity is not None:
            self.last_equity = last_equity
        if long_market_value is not None:
            self.long_market_value = long_market_value
        if short_market_value is not None:
            self.short_market_value = short_market_value
        if initial_margin is not None:
            self.initial_margin = initial_margin
        if maintenance_margin is not None:
            self.maintenance_margin = maintenance_margin
        if last_maintenance_margin is not None:
            self.last_maintenance_margin = last_maintenance_margin
        if sma is not None:
            self.sma = sma
        if daytrade_count is not None:
            self.daytrade_count = daytrade_count
        if previous_close is not None:
            self.previous_close = previous_close
        if last_long_market_value is not None:
            self.last_long_market_value = last_long_market_value
        if last_short_market_value is not None:
            self.last_short_market_value = last_short_market_value
        if last_cash is not None:
            self.last_cash = last_cash
        if last_initial_margin is not None:
            self.last_initial_margin = last_initial_margin
        if last_regt_buying_power is not None:
            self.last_regt_buying_power = last_regt_buying_power
        if last_daytrading_buying_power is not None:
            self.last_daytrading_buying_power = last_daytrading_buying_power
        if last_buying_power is not None:
            self.last_buying_power = last_buying_power
        if last_daytrade_count is not None:
            self.last_daytrade_count = last_daytrade_count
        if clearing_broker is not None:
            self.clearing_broker = clearing_broker

    @property
    def id(self):
        """Gets the id of this InlineResponse200.  # noqa: E501


        :return: The id of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200.


        :param id: The id of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def account_number(self):
        """Gets the account_number of this InlineResponse200.  # noqa: E501


        :return: The account_number of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this InlineResponse200.


        :param account_number: The account_number of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def status(self):
        """Gets the status of this InlineResponse200.  # noqa: E501


        :return: The status of this InlineResponse200.  # noqa: E501
        :rtype: AccountStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200.


        :param status: The status of this InlineResponse200.  # noqa: E501
        :type: AccountStatus
        """

        self._status = status

    @property
    def currency(self):
        """Gets the currency of this InlineResponse200.  # noqa: E501


        :return: The currency of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineResponse200.


        :param currency: The currency of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def buying_power(self):
        """Gets the buying_power of this InlineResponse200.  # noqa: E501


        :return: The buying_power of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._buying_power

    @buying_power.setter
    def buying_power(self, buying_power):
        """Sets the buying_power of this InlineResponse200.


        :param buying_power: The buying_power of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._buying_power = buying_power

    @property
    def regt_buying_power(self):
        """Gets the regt_buying_power of this InlineResponse200.  # noqa: E501


        :return: The regt_buying_power of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._regt_buying_power

    @regt_buying_power.setter
    def regt_buying_power(self, regt_buying_power):
        """Sets the regt_buying_power of this InlineResponse200.


        :param regt_buying_power: The regt_buying_power of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._regt_buying_power = regt_buying_power

    @property
    def daytrading_buying_power(self):
        """Gets the daytrading_buying_power of this InlineResponse200.  # noqa: E501


        :return: The daytrading_buying_power of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._daytrading_buying_power

    @daytrading_buying_power.setter
    def daytrading_buying_power(self, daytrading_buying_power):
        """Sets the daytrading_buying_power of this InlineResponse200.


        :param daytrading_buying_power: The daytrading_buying_power of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._daytrading_buying_power = daytrading_buying_power

    @property
    def cash(self):
        """Gets the cash of this InlineResponse200.  # noqa: E501


        :return: The cash of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this InlineResponse200.


        :param cash: The cash of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._cash = cash

    @property
    def cash_withdrawable(self):
        """Gets the cash_withdrawable of this InlineResponse200.  # noqa: E501


        :return: The cash_withdrawable of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._cash_withdrawable

    @cash_withdrawable.setter
    def cash_withdrawable(self, cash_withdrawable):
        """Sets the cash_withdrawable of this InlineResponse200.


        :param cash_withdrawable: The cash_withdrawable of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._cash_withdrawable = cash_withdrawable

    @property
    def cash_transferable(self):
        """Gets the cash_transferable of this InlineResponse200.  # noqa: E501


        :return: The cash_transferable of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._cash_transferable

    @cash_transferable.setter
    def cash_transferable(self, cash_transferable):
        """Sets the cash_transferable of this InlineResponse200.


        :param cash_transferable: The cash_transferable of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._cash_transferable = cash_transferable

    @property
    def pending_transfer_out(self):
        """Gets the pending_transfer_out of this InlineResponse200.  # noqa: E501


        :return: The pending_transfer_out of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._pending_transfer_out

    @pending_transfer_out.setter
    def pending_transfer_out(self, pending_transfer_out):
        """Sets the pending_transfer_out of this InlineResponse200.


        :param pending_transfer_out: The pending_transfer_out of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._pending_transfer_out = pending_transfer_out

    @property
    def portfolio_value(self):
        """Gets the portfolio_value of this InlineResponse200.  # noqa: E501


        :return: The portfolio_value of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._portfolio_value

    @portfolio_value.setter
    def portfolio_value(self, portfolio_value):
        """Sets the portfolio_value of this InlineResponse200.


        :param portfolio_value: The portfolio_value of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._portfolio_value = portfolio_value

    @property
    def pattern_day_trader(self):
        """Gets the pattern_day_trader of this InlineResponse200.  # noqa: E501


        :return: The pattern_day_trader of this InlineResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._pattern_day_trader

    @pattern_day_trader.setter
    def pattern_day_trader(self, pattern_day_trader):
        """Sets the pattern_day_trader of this InlineResponse200.


        :param pattern_day_trader: The pattern_day_trader of this InlineResponse200.  # noqa: E501
        :type: bool
        """

        self._pattern_day_trader = pattern_day_trader

    @property
    def trading_blocked(self):
        """Gets the trading_blocked of this InlineResponse200.  # noqa: E501


        :return: The trading_blocked of this InlineResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._trading_blocked

    @trading_blocked.setter
    def trading_blocked(self, trading_blocked):
        """Sets the trading_blocked of this InlineResponse200.


        :param trading_blocked: The trading_blocked of this InlineResponse200.  # noqa: E501
        :type: bool
        """

        self._trading_blocked = trading_blocked

    @property
    def transfers_blocked(self):
        """Gets the transfers_blocked of this InlineResponse200.  # noqa: E501


        :return: The transfers_blocked of this InlineResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._transfers_blocked

    @transfers_blocked.setter
    def transfers_blocked(self, transfers_blocked):
        """Sets the transfers_blocked of this InlineResponse200.


        :param transfers_blocked: The transfers_blocked of this InlineResponse200.  # noqa: E501
        :type: bool
        """

        self._transfers_blocked = transfers_blocked

    @property
    def account_blocked(self):
        """Gets the account_blocked of this InlineResponse200.  # noqa: E501


        :return: The account_blocked of this InlineResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._account_blocked

    @account_blocked.setter
    def account_blocked(self, account_blocked):
        """Sets the account_blocked of this InlineResponse200.


        :param account_blocked: The account_blocked of this InlineResponse200.  # noqa: E501
        :type: bool
        """

        self._account_blocked = account_blocked

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse200.  # noqa: E501


        :return: The created_at of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse200.


        :param created_at: The created_at of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def trade_suspended_by_user(self):
        """Gets the trade_suspended_by_user of this InlineResponse200.  # noqa: E501


        :return: The trade_suspended_by_user of this InlineResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._trade_suspended_by_user

    @trade_suspended_by_user.setter
    def trade_suspended_by_user(self, trade_suspended_by_user):
        """Sets the trade_suspended_by_user of this InlineResponse200.


        :param trade_suspended_by_user: The trade_suspended_by_user of this InlineResponse200.  # noqa: E501
        :type: bool
        """

        self._trade_suspended_by_user = trade_suspended_by_user

    @property
    def multiplier(self):
        """Gets the multiplier of this InlineResponse200.  # noqa: E501


        :return: The multiplier of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """Sets the multiplier of this InlineResponse200.


        :param multiplier: The multiplier of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._multiplier = multiplier

    @property
    def shorting_enabled(self):
        """Gets the shorting_enabled of this InlineResponse200.  # noqa: E501


        :return: The shorting_enabled of this InlineResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._shorting_enabled

    @shorting_enabled.setter
    def shorting_enabled(self, shorting_enabled):
        """Sets the shorting_enabled of this InlineResponse200.


        :param shorting_enabled: The shorting_enabled of this InlineResponse200.  # noqa: E501
        :type: bool
        """

        self._shorting_enabled = shorting_enabled

    @property
    def equity(self):
        """Gets the equity of this InlineResponse200.  # noqa: E501


        :return: The equity of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._equity

    @equity.setter
    def equity(self, equity):
        """Sets the equity of this InlineResponse200.


        :param equity: The equity of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._equity = equity

    @property
    def last_equity(self):
        """Gets the last_equity of this InlineResponse200.  # noqa: E501


        :return: The last_equity of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._last_equity

    @last_equity.setter
    def last_equity(self, last_equity):
        """Sets the last_equity of this InlineResponse200.


        :param last_equity: The last_equity of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._last_equity = last_equity

    @property
    def long_market_value(self):
        """Gets the long_market_value of this InlineResponse200.  # noqa: E501


        :return: The long_market_value of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._long_market_value

    @long_market_value.setter
    def long_market_value(self, long_market_value):
        """Sets the long_market_value of this InlineResponse200.


        :param long_market_value: The long_market_value of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._long_market_value = long_market_value

    @property
    def short_market_value(self):
        """Gets the short_market_value of this InlineResponse200.  # noqa: E501


        :return: The short_market_value of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._short_market_value

    @short_market_value.setter
    def short_market_value(self, short_market_value):
        """Sets the short_market_value of this InlineResponse200.


        :param short_market_value: The short_market_value of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._short_market_value = short_market_value

    @property
    def initial_margin(self):
        """Gets the initial_margin of this InlineResponse200.  # noqa: E501


        :return: The initial_margin of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._initial_margin

    @initial_margin.setter
    def initial_margin(self, initial_margin):
        """Sets the initial_margin of this InlineResponse200.


        :param initial_margin: The initial_margin of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._initial_margin = initial_margin

    @property
    def maintenance_margin(self):
        """Gets the maintenance_margin of this InlineResponse200.  # noqa: E501


        :return: The maintenance_margin of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_margin

    @maintenance_margin.setter
    def maintenance_margin(self, maintenance_margin):
        """Sets the maintenance_margin of this InlineResponse200.


        :param maintenance_margin: The maintenance_margin of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._maintenance_margin = maintenance_margin

    @property
    def last_maintenance_margin(self):
        """Gets the last_maintenance_margin of this InlineResponse200.  # noqa: E501


        :return: The last_maintenance_margin of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._last_maintenance_margin

    @last_maintenance_margin.setter
    def last_maintenance_margin(self, last_maintenance_margin):
        """Sets the last_maintenance_margin of this InlineResponse200.


        :param last_maintenance_margin: The last_maintenance_margin of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._last_maintenance_margin = last_maintenance_margin

    @property
    def sma(self):
        """Gets the sma of this InlineResponse200.  # noqa: E501


        :return: The sma of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._sma

    @sma.setter
    def sma(self, sma):
        """Sets the sma of this InlineResponse200.


        :param sma: The sma of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._sma = sma

    @property
    def daytrade_count(self):
        """Gets the daytrade_count of this InlineResponse200.  # noqa: E501


        :return: The daytrade_count of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._daytrade_count

    @daytrade_count.setter
    def daytrade_count(self, daytrade_count):
        """Sets the daytrade_count of this InlineResponse200.


        :param daytrade_count: The daytrade_count of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._daytrade_count = daytrade_count

    @property
    def previous_close(self):
        """Gets the previous_close of this InlineResponse200.  # noqa: E501


        :return: The previous_close of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._previous_close

    @previous_close.setter
    def previous_close(self, previous_close):
        """Sets the previous_close of this InlineResponse200.


        :param previous_close: The previous_close of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._previous_close = previous_close

    @property
    def last_long_market_value(self):
        """Gets the last_long_market_value of this InlineResponse200.  # noqa: E501


        :return: The last_long_market_value of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._last_long_market_value

    @last_long_market_value.setter
    def last_long_market_value(self, last_long_market_value):
        """Sets the last_long_market_value of this InlineResponse200.


        :param last_long_market_value: The last_long_market_value of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._last_long_market_value = last_long_market_value

    @property
    def last_short_market_value(self):
        """Gets the last_short_market_value of this InlineResponse200.  # noqa: E501


        :return: The last_short_market_value of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._last_short_market_value

    @last_short_market_value.setter
    def last_short_market_value(self, last_short_market_value):
        """Sets the last_short_market_value of this InlineResponse200.


        :param last_short_market_value: The last_short_market_value of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._last_short_market_value = last_short_market_value

    @property
    def last_cash(self):
        """Gets the last_cash of this InlineResponse200.  # noqa: E501


        :return: The last_cash of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._last_cash

    @last_cash.setter
    def last_cash(self, last_cash):
        """Sets the last_cash of this InlineResponse200.


        :param last_cash: The last_cash of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._last_cash = last_cash

    @property
    def last_initial_margin(self):
        """Gets the last_initial_margin of this InlineResponse200.  # noqa: E501


        :return: The last_initial_margin of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._last_initial_margin

    @last_initial_margin.setter
    def last_initial_margin(self, last_initial_margin):
        """Sets the last_initial_margin of this InlineResponse200.


        :param last_initial_margin: The last_initial_margin of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._last_initial_margin = last_initial_margin

    @property
    def last_regt_buying_power(self):
        """Gets the last_regt_buying_power of this InlineResponse200.  # noqa: E501


        :return: The last_regt_buying_power of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._last_regt_buying_power

    @last_regt_buying_power.setter
    def last_regt_buying_power(self, last_regt_buying_power):
        """Sets the last_regt_buying_power of this InlineResponse200.


        :param last_regt_buying_power: The last_regt_buying_power of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._last_regt_buying_power = last_regt_buying_power

    @property
    def last_daytrading_buying_power(self):
        """Gets the last_daytrading_buying_power of this InlineResponse200.  # noqa: E501


        :return: The last_daytrading_buying_power of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._last_daytrading_buying_power

    @last_daytrading_buying_power.setter
    def last_daytrading_buying_power(self, last_daytrading_buying_power):
        """Sets the last_daytrading_buying_power of this InlineResponse200.


        :param last_daytrading_buying_power: The last_daytrading_buying_power of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._last_daytrading_buying_power = last_daytrading_buying_power

    @property
    def last_buying_power(self):
        """Gets the last_buying_power of this InlineResponse200.  # noqa: E501


        :return: The last_buying_power of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._last_buying_power

    @last_buying_power.setter
    def last_buying_power(self, last_buying_power):
        """Sets the last_buying_power of this InlineResponse200.


        :param last_buying_power: The last_buying_power of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._last_buying_power = last_buying_power

    @property
    def last_daytrade_count(self):
        """Gets the last_daytrade_count of this InlineResponse200.  # noqa: E501


        :return: The last_daytrade_count of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._last_daytrade_count

    @last_daytrade_count.setter
    def last_daytrade_count(self, last_daytrade_count):
        """Sets the last_daytrade_count of this InlineResponse200.


        :param last_daytrade_count: The last_daytrade_count of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._last_daytrade_count = last_daytrade_count

    @property
    def clearing_broker(self):
        """Gets the clearing_broker of this InlineResponse200.  # noqa: E501


        :return: The clearing_broker of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._clearing_broker

    @clearing_broker.setter
    def clearing_broker(self, clearing_broker):
        """Sets the clearing_broker of this InlineResponse200.


        :param clearing_broker: The clearing_broker of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._clearing_broker = clearing_broker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
