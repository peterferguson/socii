# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2005(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_number': 'str',
        'status_from': 'str',
        'status_to': 'str',
        'reason': 'str',
        'at': 'datetime'
    }

    attribute_map = {
        'account_id': 'account_id',
        'account_number': 'account_number',
        'status_from': 'status_from',
        'status_to': 'status_to',
        'reason': 'reason',
        'at': 'at'
    }

    def __init__(self, account_id=None, account_number=None, status_from=None, status_to=None, reason=None, at=None):  # noqa: E501
        """InlineResponse2005 - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_number = None
        self._status_from = None
        self._status_to = None
        self._reason = None
        self._at = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_number is not None:
            self.account_number = account_number
        if status_from is not None:
            self.status_from = status_from
        if status_to is not None:
            self.status_to = status_to
        if reason is not None:
            self.reason = reason
        if at is not None:
            self.at = at

    @property
    def account_id(self):
        """Gets the account_id of this InlineResponse2005.  # noqa: E501


        :return: The account_id of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InlineResponse2005.


        :param account_id: The account_id of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_number(self):
        """Gets the account_number of this InlineResponse2005.  # noqa: E501


        :return: The account_number of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this InlineResponse2005.


        :param account_number: The account_number of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def status_from(self):
        """Gets the status_from of this InlineResponse2005.  # noqa: E501


        :return: The status_from of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._status_from

    @status_from.setter
    def status_from(self, status_from):
        """Sets the status_from of this InlineResponse2005.


        :param status_from: The status_from of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._status_from = status_from

    @property
    def status_to(self):
        """Gets the status_to of this InlineResponse2005.  # noqa: E501


        :return: The status_to of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._status_to

    @status_to.setter
    def status_to(self, status_to):
        """Sets the status_to of this InlineResponse2005.


        :param status_to: The status_to of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._status_to = status_to

    @property
    def reason(self):
        """Gets the reason of this InlineResponse2005.  # noqa: E501


        :return: The reason of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this InlineResponse2005.


        :param reason: The reason of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def at(self):
        """Gets the at of this InlineResponse2005.  # noqa: E501


        :return: The at of this InlineResponse2005.  # noqa: E501
        :rtype: datetime
        """
        return self._at

    @at.setter
    def at(self, at):
        """Sets the at of this InlineResponse2005.


        :param at: The at of this InlineResponse2005.  # noqa: E501
        :type: datetime
        """

        self._at = at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2005, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
