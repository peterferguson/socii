# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ACHRelationshipData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_owner_name': 'str',
        'bank_account_type': 'str',
        'bank_account_number': 'str',
        'bank_routing_number': 'str',
        'nickname': 'str'
    }

    attribute_map = {
        'account_owner_name': 'account_owner_name',
        'bank_account_type': 'bank_account_type',
        'bank_account_number': 'bank_account_number',
        'bank_routing_number': 'bank_routing_number',
        'nickname': 'nickname'
    }

    def __init__(self, account_owner_name=None, bank_account_type=None, bank_account_number=None, bank_routing_number=None, nickname=None):  # noqa: E501
        """ACHRelationshipData - a model defined in Swagger"""  # noqa: E501
        self._account_owner_name = None
        self._bank_account_type = None
        self._bank_account_number = None
        self._bank_routing_number = None
        self._nickname = None
        self.discriminator = None
        self.account_owner_name = account_owner_name
        self.bank_account_type = bank_account_type
        self.bank_account_number = bank_account_number
        self.bank_routing_number = bank_routing_number
        if nickname is not None:
            self.nickname = nickname

    @property
    def account_owner_name(self):
        """Gets the account_owner_name of this ACHRelationshipData.  # noqa: E501


        :return: The account_owner_name of this ACHRelationshipData.  # noqa: E501
        :rtype: str
        """
        return self._account_owner_name

    @account_owner_name.setter
    def account_owner_name(self, account_owner_name):
        """Sets the account_owner_name of this ACHRelationshipData.


        :param account_owner_name: The account_owner_name of this ACHRelationshipData.  # noqa: E501
        :type: str
        """
        if account_owner_name is None:
            raise ValueError("Invalid value for `account_owner_name`, must not be `None`")  # noqa: E501

        self._account_owner_name = account_owner_name

    @property
    def bank_account_type(self):
        """Gets the bank_account_type of this ACHRelationshipData.  # noqa: E501


        :return: The bank_account_type of this ACHRelationshipData.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_type

    @bank_account_type.setter
    def bank_account_type(self, bank_account_type):
        """Sets the bank_account_type of this ACHRelationshipData.


        :param bank_account_type: The bank_account_type of this ACHRelationshipData.  # noqa: E501
        :type: str
        """
        if bank_account_type is None:
            raise ValueError("Invalid value for `bank_account_type`, must not be `None`")  # noqa: E501
        allowed_values = ["CHECKING", "SAVINGS"]  # noqa: E501
        if bank_account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bank_account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(bank_account_type, allowed_values)
            )

        self._bank_account_type = bank_account_type

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this ACHRelationshipData.  # noqa: E501


        :return: The bank_account_number of this ACHRelationshipData.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this ACHRelationshipData.


        :param bank_account_number: The bank_account_number of this ACHRelationshipData.  # noqa: E501
        :type: str
        """
        if bank_account_number is None:
            raise ValueError("Invalid value for `bank_account_number`, must not be `None`")  # noqa: E501

        self._bank_account_number = bank_account_number

    @property
    def bank_routing_number(self):
        """Gets the bank_routing_number of this ACHRelationshipData.  # noqa: E501


        :return: The bank_routing_number of this ACHRelationshipData.  # noqa: E501
        :rtype: str
        """
        return self._bank_routing_number

    @bank_routing_number.setter
    def bank_routing_number(self, bank_routing_number):
        """Sets the bank_routing_number of this ACHRelationshipData.


        :param bank_routing_number: The bank_routing_number of this ACHRelationshipData.  # noqa: E501
        :type: str
        """
        if bank_routing_number is None:
            raise ValueError("Invalid value for `bank_routing_number`, must not be `None`")  # noqa: E501

        self._bank_routing_number = bank_routing_number

    @property
    def nickname(self):
        """Gets the nickname of this ACHRelationshipData.  # noqa: E501


        :return: The nickname of this ACHRelationshipData.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ACHRelationshipData.


        :param nickname: The nickname of this ACHRelationshipData.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ACHRelationshipData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ACHRelationshipData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
