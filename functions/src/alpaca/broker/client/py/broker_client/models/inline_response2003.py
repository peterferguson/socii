# coding: utf-8

"""
    Alpaca Broker API

    Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2003(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'str',
        'is_open': 'bool',
        'next_open': 'str',
        'next_close': 'str'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'is_open': 'is_open',
        'next_open': 'next_open',
        'next_close': 'next_close'
    }

    def __init__(self, timestamp=None, is_open=None, next_open=None, next_close=None):  # noqa: E501
        """InlineResponse2003 - a model defined in Swagger"""  # noqa: E501
        self._timestamp = None
        self._is_open = None
        self._next_open = None
        self._next_close = None
        self.discriminator = None
        if timestamp is not None:
            self.timestamp = timestamp
        if is_open is not None:
            self.is_open = is_open
        if next_open is not None:
            self.next_open = next_open
        if next_close is not None:
            self.next_close = next_close

    @property
    def timestamp(self):
        """Gets the timestamp of this InlineResponse2003.  # noqa: E501


        :return: The timestamp of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this InlineResponse2003.


        :param timestamp: The timestamp of this InlineResponse2003.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def is_open(self):
        """Gets the is_open of this InlineResponse2003.  # noqa: E501


        :return: The is_open of this InlineResponse2003.  # noqa: E501
        :rtype: bool
        """
        return self._is_open

    @is_open.setter
    def is_open(self, is_open):
        """Sets the is_open of this InlineResponse2003.


        :param is_open: The is_open of this InlineResponse2003.  # noqa: E501
        :type: bool
        """

        self._is_open = is_open

    @property
    def next_open(self):
        """Gets the next_open of this InlineResponse2003.  # noqa: E501


        :return: The next_open of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._next_open

    @next_open.setter
    def next_open(self, next_open):
        """Sets the next_open of this InlineResponse2003.


        :param next_open: The next_open of this InlineResponse2003.  # noqa: E501
        :type: str
        """

        self._next_open = next_open

    @property
    def next_close(self):
        """Gets the next_close of this InlineResponse2003.  # noqa: E501


        :return: The next_close of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._next_close

    @next_close.setter
    def next_close(self, next_close):
        """Sets the next_close of this InlineResponse2003.


        :param next_close: The next_close of this InlineResponse2003.  # noqa: E501
        :type: str
        """

        self._next_close = next_close

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
