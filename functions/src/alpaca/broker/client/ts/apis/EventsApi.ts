/* tslint:disable */
/* eslint-disable */
/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse2004,
    InlineResponse2004FromJSON,
    InlineResponse2004ToJSON,
    InlineResponse2005,
    InlineResponse2005FromJSON,
    InlineResponse2005ToJSON,
} from '../models';

export interface EventsAccountsStatusGetRequest {
    since?: Date;
    until?: Date;
    sinceId?: number;
    untilId?: number;
}

export interface EventsJournalsStatusGetRequest {
    since?: Date;
    until?: Date;
    sinceId?: number;
    untilId?: number;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     * Query Params Rules: - `since` required if `until` specified - `since_id` required if `until_id` specified - `since` and `since_id` can’t be used at the same time Behavior: - if `since` or `since_id` not specified this will not return any historic data - if `until` or `until_id` reached stream will end (status 200) 
     * Subscribe to account status events (SSE).
     */
    async eventsAccountsStatusGetRaw(requestParameters: EventsAccountsStatusGetRequest): Promise<runtime.ApiResponse<InlineResponse2004>> {
        const queryParameters: any = {};

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = (requestParameters.since as any).toISOString();
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = (requestParameters.until as any).toISOString();
        }

        if (requestParameters.sinceId !== undefined) {
            queryParameters['since_id'] = requestParameters.sinceId;
        }

        if (requestParameters.untilId !== undefined) {
            queryParameters['until_id'] = requestParameters.untilId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/events/accounts/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * Query Params Rules: - `since` required if `until` specified - `since_id` required if `until_id` specified - `since` and `since_id` can’t be used at the same time Behavior: - if `since` or `since_id` not specified this will not return any historic data - if `until` or `until_id` reached stream will end (status 200) 
     * Subscribe to account status events (SSE).
     */
    async eventsAccountsStatusGet(requestParameters: EventsAccountsStatusGetRequest): Promise<InlineResponse2004> {
        const response = await this.eventsAccountsStatusGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Query Params Rules: - `since` required if `until` specified - `since_id` required if `until_id` specified - `since` and `since_id` can’t be used at the same time Behavior: - if `since` or `since_id` not specified this will not return any historic data - if `until` or `until_id` reached stream will end (status 200) 
     * Subscribe to journal events (SSE).
     */
    async eventsJournalsStatusGetRaw(requestParameters: EventsJournalsStatusGetRequest): Promise<runtime.ApiResponse<InlineResponse2005>> {
        const queryParameters: any = {};

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = (requestParameters.since as any).toISOString();
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = (requestParameters.until as any).toISOString();
        }

        if (requestParameters.sinceId !== undefined) {
            queryParameters['since_id'] = requestParameters.sinceId;
        }

        if (requestParameters.untilId !== undefined) {
            queryParameters['until_id'] = requestParameters.untilId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/events/journals/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2005FromJSON(jsonValue));
    }

    /**
     * Query Params Rules: - `since` required if `until` specified - `since_id` required if `until_id` specified - `since` and `since_id` can’t be used at the same time Behavior: - if `since` or `since_id` not specified this will not return any historic data - if `until` or `until_id` reached stream will end (status 200) 
     * Subscribe to journal events (SSE).
     */
    async eventsJournalsStatusGet(requestParameters: EventsJournalsStatusGetRequest): Promise<InlineResponse2005> {
        const response = await this.eventsJournalsStatusGetRaw(requestParameters);
        return await response.value();
    }

}
