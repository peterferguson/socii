/* tslint:disable */
/* eslint-disable */
/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Disclosures fields denote if the account owner falls under
 * each category defined by FINRA rule. The client has to ask
 * questions for the end user and the values should reflect
 * their answers. 
 * If one of the answers is true (yes), the account goes into
 * ACTION_REQUIRED status.
 * @export
 * @interface Disclosures
 */
export interface Disclosures {
    /**
     * 
     * @type {string}
     * @memberof Disclosures
     */
    employmentStatus?: DisclosuresEmploymentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Disclosures
     */
    employerName?: string;
    /**
     * 
     * @type {string}
     * @memberof Disclosures
     */
    employerAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof Disclosures
     */
    employmentPosition?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Disclosures
     */
    isControlPerson: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Disclosures
     */
    isAffiliatedExchangeOrFinra: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Disclosures
     */
    isPoliticallyExposed: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Disclosures
     */
    immediateFamilyExposed: boolean;
}

/**
* @export
* @enum {string}
*/
export enum DisclosuresEmploymentStatusEnum {
    Unemployed = 'unemployed',
    Employed = 'employed',
    Student = 'student',
    Retired = 'retired'
}

export function DisclosuresFromJSON(json: any): Disclosures {
    return DisclosuresFromJSONTyped(json, false);
}

export function DisclosuresFromJSONTyped(json: any, ignoreDiscriminator: boolean): Disclosures {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'employmentStatus': !exists(json, 'employment_status') ? undefined : json['employment_status'],
        'employerName': !exists(json, 'employer_name') ? undefined : json['employer_name'],
        'employerAddress': !exists(json, 'employer_address') ? undefined : json['employer_address'],
        'employmentPosition': !exists(json, 'employment_position') ? undefined : json['employment_position'],
        'isControlPerson': json['is_control_person'],
        'isAffiliatedExchangeOrFinra': json['is_affiliated_exchange_or_finra'],
        'isPoliticallyExposed': json['is_politically_exposed'],
        'immediateFamilyExposed': json['immediate_family_exposed'],
    };
}

export function DisclosuresToJSON(value?: Disclosures | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'employment_status': value.employmentStatus,
        'employer_name': value.employerName,
        'employer_address': value.employerAddress,
        'employment_position': value.employmentPosition,
        'is_control_person': value.isControlPerson,
        'is_affiliated_exchange_or_finra': value.isAffiliatedExchangeOrFinra,
        'is_politically_exposed': value.isPoliticallyExposed,
        'immediate_family_exposed': value.immediateFamilyExposed,
    };
}


