/* tslint:disable */
/* eslint-disable */
/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Activity,
    ActivityFromJSON,
    ActivityFromJSONTyped,
    ActivityToJSON,
    ActivityType,
    ActivityTypeFromJSON,
    ActivityTypeFromJSONTyped,
    ActivityTypeToJSON,
    NonTradeActivityAllOf,
    NonTradeActivityAllOfFromJSON,
    NonTradeActivityAllOfFromJSONTyped,
    NonTradeActivityAllOfToJSON,
} from './';

/**
 * 
 * @export
 * @interface NonTradeActivity
 */
export interface NonTradeActivity {
    /**
     * 
     * @type {string}
     * @memberof NonTradeActivity
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof NonTradeActivity
     */
    accountId?: string;
    /**
     * 
     * @type {ActivityType}
     * @memberof NonTradeActivity
     */
    activityType?: ActivityType;
    /**
     * 
     * @type {Date}
     * @memberof NonTradeActivity
     */
    date?: Date;
    /**
     * 
     * @type {string}
     * @memberof NonTradeActivity
     */
    netAmount?: string;
    /**
     * 
     * @type {string}
     * @memberof NonTradeActivity
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof NonTradeActivity
     */
    status?: NonTradeActivityStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof NonTradeActivity
     */
    symbol?: string;
    /**
     * 
     * @type {string}
     * @memberof NonTradeActivity
     */
    qty?: string;
    /**
     * 
     * @type {string}
     * @memberof NonTradeActivity
     */
    perShareAmount?: string;
}

/**
* @export
* @enum {string}
*/
export enum NonTradeActivityStatusEnum {
    Executed = 'executed',
    Correct = 'correct',
    Canceled = 'canceled'
}

export function NonTradeActivityFromJSON(json: any): NonTradeActivity {
    return NonTradeActivityFromJSONTyped(json, false);
}

export function NonTradeActivityFromJSONTyped(json: any, ignoreDiscriminator: boolean): NonTradeActivity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'accountId': !exists(json, 'account_id') ? undefined : json['account_id'],
        'activityType': !exists(json, 'activity_type') ? undefined : ActivityTypeFromJSON(json['activity_type']),
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
        'netAmount': !exists(json, 'net_amount') ? undefined : json['net_amount'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'symbol': !exists(json, 'symbol') ? undefined : json['symbol'],
        'qty': !exists(json, 'qty') ? undefined : json['qty'],
        'perShareAmount': !exists(json, 'per_share_amount') ? undefined : json['per_share_amount'],
    };
}

export function NonTradeActivityToJSON(value?: NonTradeActivity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'account_id': value.accountId,
        'activity_type': ActivityTypeToJSON(value.activityType),
        'date': value.date === undefined ? undefined : (value.date.toISOString().substr(0,10)),
        'net_amount': value.netAmount,
        'description': value.description,
        'status': value.status,
        'symbol': value.symbol,
        'qty': value.qty,
        'per_share_amount': value.perShareAmount,
    };
}


