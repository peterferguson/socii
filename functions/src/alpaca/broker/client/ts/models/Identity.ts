/* tslint:disable */
/* eslint-disable */
/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Identity is the model to provide account ownerâ€™s identity information.
 * @export
 * @interface Identity
 */
export interface Identity {
    /**
     * 
     * @type {string}
     * @memberof Identity
     */
    givenName: string;
    /**
     * 
     * @type {string}
     * @memberof Identity
     */
    familyName: string;
    /**
     * 
     * @type {Date}
     * @memberof Identity
     */
    dateOfBirth: Date;
    /**
     * 
     * @type {string}
     * @memberof Identity
     */
    taxId?: string;
    /**
     * 
     * @type {string}
     * @memberof Identity
     */
    taxIdType?: IdentityTaxIdTypeEnum;
    /**
     * [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).
     * @type {string}
     * @memberof Identity
     */
    countryOfCitizenship?: string;
    /**
     * [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).
     * @type {string}
     * @memberof Identity
     */
    countryOfBirth?: string;
    /**
     * [ISO 3166-1 alpha-3](https://www.iso.org/iso-3166-country-codes.html).
     * @type {string}
     * @memberof Identity
     */
    countryOfTaxResidence: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Identity
     */
    fundingSource: Array<IdentityFundingSourceEnum>;
    /**
     * 
     * @type {number}
     * @memberof Identity
     */
    annualIncomeMin?: number;
    /**
     * 
     * @type {number}
     * @memberof Identity
     */
    annualIncomeMax?: number;
    /**
     * 
     * @type {number}
     * @memberof Identity
     */
    liquidNetWorthMin?: number;
    /**
     * 
     * @type {number}
     * @memberof Identity
     */
    liquidNetWorthMax?: number;
    /**
     * 
     * @type {number}
     * @memberof Identity
     */
    totalNetWorthMin?: number;
    /**
     * 
     * @type {number}
     * @memberof Identity
     */
    totalNetWorthMax?: number;
    /**
     * any extra information used for KYC purposes
     * @type {object}
     * @memberof Identity
     */
    extra?: object;
}

/**
* @export
* @enum {string}
*/
export enum IdentityTaxIdTypeEnum {
    UsaSsn = 'USA_SSN',
    AusTfn = 'AUS_TFN',
    AusAbn = 'AUS_ABN',
    DeuTaxId = 'DEU_TAX_ID',
    FraSpi = 'FRA_SPI',
    GbrUtr = 'GBR_UTR',
    GbrNino = 'GBR_NINO',
    HunTin = 'HUN_TIN',
    IndPan = 'IND_PAN',
    IsrTaxId = 'ISR_TAX_ID',
    ItaTaxId = 'ITA_TAX_ID',
    JpnTaxId = 'JPN_TAX_ID',
    NldTin = 'NLD_TIN',
    SgpNric = 'SGP_NRIC',
    SgpFin = 'SGP_FIN',
    SgpAsgd = 'SGP_ASGD',
    SgpItr = 'SGP_ITR',
    SweTaxId = 'SWE_TAX_ID',
    NotSpecified = 'NOT_SPECIFIED'
}/**
* @export
* @enum {string}
*/
export enum IdentityFundingSourceEnum {
    EmploymentIncome = 'employment_income',
    Investments = 'investments',
    Inheritance = 'inheritance',
    BusinessIncome = 'business_income',
    Savings = 'savings',
    Family = 'family'
}

export function IdentityFromJSON(json: any): Identity {
    return IdentityFromJSONTyped(json, false);
}

export function IdentityFromJSONTyped(json: any, ignoreDiscriminator: boolean): Identity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'givenName': json['given_name'],
        'familyName': json['family_name'],
        'dateOfBirth': (new Date(json['date_of_birth'])),
        'taxId': !exists(json, 'tax_id') ? undefined : json['tax_id'],
        'taxIdType': !exists(json, 'tax_id_type') ? undefined : json['tax_id_type'],
        'countryOfCitizenship': !exists(json, 'country_of_citizenship') ? undefined : json['country_of_citizenship'],
        'countryOfBirth': !exists(json, 'country_of_birth') ? undefined : json['country_of_birth'],
        'countryOfTaxResidence': json['country_of_tax_residence'],
        'fundingSource': json['funding_source'],
        'annualIncomeMin': !exists(json, 'annual_income_min') ? undefined : json['annual_income_min'],
        'annualIncomeMax': !exists(json, 'annual_income_max') ? undefined : json['annual_income_max'],
        'liquidNetWorthMin': !exists(json, 'liquid_net_worth_min') ? undefined : json['liquid_net_worth_min'],
        'liquidNetWorthMax': !exists(json, 'liquid_net_worth_max') ? undefined : json['liquid_net_worth_max'],
        'totalNetWorthMin': !exists(json, 'total_net_worth_min') ? undefined : json['total_net_worth_min'],
        'totalNetWorthMax': !exists(json, 'total_net_worth_max') ? undefined : json['total_net_worth_max'],
        'extra': !exists(json, 'extra') ? undefined : json['extra'],
    };
}

export function IdentityToJSON(value?: Identity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'given_name': value.givenName,
        'family_name': value.familyName,
        'date_of_birth': (value.dateOfBirth.toISOString().substr(0,10)),
        'tax_id': value.taxId,
        'tax_id_type': value.taxIdType,
        'country_of_citizenship': value.countryOfCitizenship,
        'country_of_birth': value.countryOfBirth,
        'country_of_tax_residence': value.countryOfTaxResidence,
        'funding_source': value.fundingSource,
        'annual_income_min': value.annualIncomeMin,
        'annual_income_max': value.annualIncomeMax,
        'liquid_net_worth_min': value.liquidNetWorthMin,
        'liquid_net_worth_max': value.liquidNetWorthMax,
        'total_net_worth_min': value.totalNetWorthMin,
        'total_net_worth_max': value.totalNetWorthMax,
        'extra': value.extra,
    };
}


