/* tslint:disable */
/* eslint-disable */
/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Activity,
    ActivityFromJSON,
    ActivityFromJSONTyped,
    ActivityToJSON,
    ActivityType,
    ActivityTypeFromJSON,
    ActivityTypeFromJSONTyped,
    ActivityTypeToJSON,
    TradeActivityAllOf,
    TradeActivityAllOfFromJSON,
    TradeActivityAllOfFromJSONTyped,
    TradeActivityAllOfToJSON,
} from './';

/**
 * 
 * @export
 * @interface TradeActivity
 */
export interface TradeActivity {
    /**
     * 
     * @type {string}
     * @memberof TradeActivity
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TradeActivity
     */
    accountId?: string;
    /**
     * 
     * @type {ActivityType}
     * @memberof TradeActivity
     */
    activityType?: ActivityType;
    /**
     * 
     * @type {string}
     * @memberof TradeActivity
     */
    transactionTime?: string;
    /**
     * 
     * @type {string}
     * @memberof TradeActivity
     */
    type?: TradeActivityTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TradeActivity
     */
    price?: string;
    /**
     * 
     * @type {string}
     * @memberof TradeActivity
     */
    qty?: string;
    /**
     * 
     * @type {string}
     * @memberof TradeActivity
     */
    side?: TradeActivitySideEnum;
    /**
     * 
     * @type {string}
     * @memberof TradeActivity
     */
    symbol?: string;
    /**
     * 
     * @type {string}
     * @memberof TradeActivity
     */
    leavesQty?: string;
    /**
     * 
     * @type {string}
     * @memberof TradeActivity
     */
    orderId?: string;
    /**
     * 
     * @type {string}
     * @memberof TradeActivity
     */
    cumQty?: string;
    /**
     * 
     * @type {string}
     * @memberof TradeActivity
     */
    orderStatus?: TradeActivityOrderStatusEnum;
}

/**
* @export
* @enum {string}
*/
export enum TradeActivityTypeEnum {
    Fill = 'fill',
    PartialFill = 'partial_fill'
}/**
* @export
* @enum {string}
*/
export enum TradeActivitySideEnum {
    Buy = 'buy',
    Sell = 'sell'
}/**
* @export
* @enum {string}
*/
export enum TradeActivityOrderStatusEnum {
    New = 'new',
    PartiallyFilled = 'partially_filled',
    Filled = 'filled',
    DoneForDay = 'done_for_day',
    Canceled = 'canceled',
    Expired = 'expired',
    Replaced = 'replaced',
    PendingCancel = 'pending_cancel',
    PendingReplace = 'pending_replace',
    Accepted = 'accepted',
    PendingNew = 'pending_new',
    AcceptedForBidding = 'accepted_for_bidding',
    Stopped = 'stopped',
    Rejected = 'rejected',
    Suspended = 'suspended',
    Calculated = 'calculated'
}

export function TradeActivityFromJSON(json: any): TradeActivity {
    return TradeActivityFromJSONTyped(json, false);
}

export function TradeActivityFromJSONTyped(json: any, ignoreDiscriminator: boolean): TradeActivity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'accountId': !exists(json, 'account_id') ? undefined : json['account_id'],
        'activityType': !exists(json, 'activity_type') ? undefined : ActivityTypeFromJSON(json['activity_type']),
        'transactionTime': !exists(json, 'transaction_time') ? undefined : json['transaction_time'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'qty': !exists(json, 'qty') ? undefined : json['qty'],
        'side': !exists(json, 'side') ? undefined : json['side'],
        'symbol': !exists(json, 'symbol') ? undefined : json['symbol'],
        'leavesQty': !exists(json, 'leaves_qty') ? undefined : json['leaves_qty'],
        'orderId': !exists(json, 'order_id') ? undefined : json['order_id'],
        'cumQty': !exists(json, 'cum_qty') ? undefined : json['cum_qty'],
        'orderStatus': !exists(json, 'order_status') ? undefined : json['order_status'],
    };
}

export function TradeActivityToJSON(value?: TradeActivity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'account_id': value.accountId,
        'activity_type': ActivityTypeToJSON(value.activityType),
        'transaction_time': value.transactionTime,
        'type': value.type,
        'price': value.price,
        'qty': value.qty,
        'side': value.side,
        'symbol': value.symbol,
        'leaves_qty': value.leavesQty,
        'order_id': value.orderId,
        'cum_qty': value.cumQty,
        'order_status': value.orderStatus,
    };
}


