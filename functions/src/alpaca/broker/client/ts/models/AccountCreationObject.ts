/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Agreement } from "./Agreement"
import { Contact } from "./Contact"
import { Disclosures } from "./Disclosures"
import { DocumentUpload } from "./DocumentUpload"
import { Identity } from "./Identity"
import { TrustedContact } from "./TrustedContact"

export class AccountCreationObject {
  "contact"?: Contact
  "identity"?: Identity
  "disclosures"?: Disclosures
  /**
   * The client has to present Alpaca Account Agreement and Margin Agreement to the end user, and have them read full sentences.
   */
  "agreements"?: Array<Agreement>
  "documents"?: Array<DocumentUpload>
  "trustedContact"?: TrustedContact

  static readonly discriminator: string | undefined = undefined

  static readonly attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
    format: string
  }> = [
    {
      name: "contact",
      baseName: "contact",
      type: "Contact",
      format: "",
    },
    {
      name: "identity",
      baseName: "identity",
      type: "Identity",
      format: "",
    },
    {
      name: "disclosures",
      baseName: "disclosures",
      type: "Disclosures",
      format: "",
    },
    {
      name: "agreements",
      baseName: "agreements",
      type: "Array<Agreement>",
      format: "",
    },
    {
      name: "documents",
      baseName: "documents",
      type: "Array<DocumentUpload>",
      format: "",
    },
    {
      name: "trustedContact",
      baseName: "trusted_contact",
      type: "TrustedContact",
      format: "",
    },
  ]

  static getAttributeTypeMap() {
    return AccountCreationObject.attributeTypeMap
  }

  static from(json) {
    // - convert baseName to name
    for (const { baseName, name } of this.attributeTypeMap) {
      if (baseName !== name && !(name in json)) {
        Object.assign(json, { [name]: json[baseName] })
        delete json[baseName]
      }
    }
    return Object.assign(new this(), json)
  }

  public constructor() {}
}
