#   generated by fastapi-codegen:
#   fastapi-codegen --input broker/openapi.yaml --output app
#   filename:  openapi.yaml
#   timestamp: 2021-07-07T22:27:50+00:00

from __future__ import annotations

from datetime import date, datetime
from typing import List, Optional
from uuid import UUID

from fastapi import FastAPI
from pydantic import conint

from .models import (
    Account,
    AccountCreationObject,
    AccountExtended,
    AccountsccountIdocumentsGetResponse,
    AccountUpdate,
    ACHRelationshipData,
    ACHRelationshipResource,
    ActivityItem,
    AssetResource,
    BankData,
    BankResource,
    BatchJournalRequest,
    BatchJournalResponse,
    CalendarGetResponse,
    ClockGetResponse,
    CreateOrder,
    DocumentUpload,
    EventsAccountsStatusGetResponse,
    EventsJournalsStatusGetResponse,
    JournalData,
    JournalResource,
    OauthAuthorizePostRequest,
    OauthAuthorizePostResponse,
    OauthClientslientIdGetResponse,
    OauthTokenPostRequest,
    OauthTokenPostResponse,
    OrderObject,
    PatchOrder,
    Position,
    TradingAccountsccountIaccountGetResponse,
    TradingAccountsccountIordersDeleteResponse,
    TransferData,
    TransferResource,
)

app = FastAPI(
    title='Alpaca Broker API',
    description='Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API',
    version='1.0.0',
)


@app.get('/accounts', response_model=List[Account])
def get_accounts(query: Optional[str] = None) -> List[Account]:
    """
    Retrieve all accounts
    """
    pass


@app.post('/accounts', response_model=Account)
def post_accounts(body: AccountCreationObject) -> Account:
    """
    Create an account
    """
    pass


@app.get('/accounts/activities', response_model=List[ActivityItem])
def get_accounts_activities(
    date: Optional[str] = None,
    until: Optional[str] = None,
    after: Optional[str] = None,
    direction: Optional[str] = None,
    account_id: Optional[UUID] = None,
    page_size: Optional[conint(ge=1, le=100)] = 100,
    page_token: Optional[str] = None,
) -> List[ActivityItem]:
    """
    Retrieve account activities
    """
    pass


@app.get('/accounts/activities/{activity_type}', response_model=List[ActivityItem])
def get_accounts_activities_activity_type(
    activity_type: str,
    date: Optional[str] = None,
    until: Optional[str] = None,
    after: Optional[str] = None,
    direction: Optional[str] = None,
    account_id: Optional[UUID] = None,
    page_size: Optional[conint(ge=1, le=100)] = 100,
    page_token: Optional[str] = None,
) -> List[ActivityItem]:
    """
    Retrieve specific account activities
    """
    pass


@app.get('/accounts/{account_id}', response_model=AccountExtended)
def get_account(account_id: UUID) -> AccountExtended:
    """
    Retrieve an account.
    """
    pass


@app.delete('/accounts/{account_id}', response_model=None)
def delete_account(account_id: UUID) -> None:
    """
    Request to close an account
    """
    pass


@app.patch('/accounts/{account_id}', response_model=Account)
def patch_account(account_id: UUID, body: AccountUpdate = ...) -> Account:
    """
    Update an account
    """
    pass


@app.get(
    '/accounts/{account_id}/ach_relationships',
    response_model=List[ACHRelationshipResource],
)
def get_ach_relationships(
    statuses: Optional[str] = None, account_id: UUID
) -> List[ACHRelationshipResource]:
    """
    Retrieve ACH Relationships for an account
    """
    pass


@app.post(
    '/accounts/{account_id}/ach_relationships', response_model=ACHRelationshipResource
)
def post_ach_relationships(
    account_id: UUID, body: ACHRelationshipData = ...
) -> ACHRelationshipResource:
    """
    Create an ACH Relationship
    """
    pass


@app.delete(
    '/accounts/{account_id}/ach_relationships/{ach_relationship_id}',
    response_model=None,
)
def delete_ach_relationship(account_id: UUID, ach_relationship_id: UUID = ...) -> None:
    """
    Delete an existing ACH relationship
    """
    pass


@app.get(
    '/accounts/{account_id}/documents',
    response_model=List[AccountsccountIdocumentsGetResponse],
)
def get_accounts_account_id_documents(
    account_id: UUID, start_date: Optional[date] = None, end_date: Optional[date] = None
) -> List[AccountsccountIdocumentsGetResponse]:
    """
    Return a list of account documents.
    """
    pass


@app.post('/accounts/{account_id}/documents/upload', response_model=None)
def post_accounts_account_id_documents_upload(
    account_id: UUID, body: DocumentUpload = ...
) -> None:
    """
    Upload a document to an already existing account
    """
    pass


@app.get('/accounts/{account_id}/documents/{document_id}/download', response_model=None)
def get_accounts_account_id_documents_document_id_download(
    account_id: UUID, document_id: UUID = ...
) -> None:
    """
    Download a document file that belongs to an account.
    """
    pass


@app.get('/accounts/{account_id}/recipient_banks', response_model=List[BankResource])
def get_recipient_banks(
    account_id: UUID, status: Optional[str] = None, bank_name: Optional[str] = None
) -> List[BankResource]:
    """
    Retrieve bank relationships for an account
    """
    pass


@app.post('/accounts/{account_id}/recipient_banks', response_model=BankResource)
def post_recipient_banks(account_id: UUID, body: BankData = ...) -> BankResource:
    """
    Create a Bank Relationship for an account
    """
    pass


@app.delete('/accounts/{account_id}/recipient_banks/{bank_id}', response_model=None)
def delete_recipient_bank(account_id: UUID, bank_id: str = ...) -> None:
    """
    Delete a Bank Relationship for an account
    """
    pass


@app.get('/accounts/{account_id}/transfers', response_model=List[TransferResource])
def get_transfers(
    account_id: UUID,
    direction: Optional[str] = None,
    limit: Optional[float] = None,
    offset: Optional[float] = None,
) -> List[TransferResource]:
    """
    Return a list of transfers for an account.
    """
    pass


@app.post('/accounts/{account_id}/transfers', response_model=TransferResource)
def post_transfers(account_id: UUID, body: TransferData = ...) -> TransferResource:
    """
    Request a new transfer
    """
    pass


@app.delete('/accounts/{account_id}/transfers/{transfer_id}', response_model=None)
def delete_transfer(account_id: str, transfer_id: str = ...) -> None:
    """
    Request to close a transfer
    """
    pass


@app.get('/assets', response_model=List[AssetResource])
def get_assets() -> List[AssetResource]:
    """
    Retrieve all assets
    """
    pass


@app.get('/assets/{asset_id}', response_model=None)
def get_assets_asset_id(asset_id: str) -> None:
    """
    Retrieve an asset by UUID
    """
    pass


@app.get('/assets/{symbol}', response_model=None)
def get_assets_symbol(symbol: str) -> None:
    """
    Retrieve an asset by symbol
    """
    pass


@app.get('/calendar', response_model=CalendarGetResponse)
def get_calendar(
    start: Optional[str] = None, end: Optional[str] = None
) -> CalendarGetResponse:
    """
    Query market calendar
    """
    pass


@app.get('/clock', response_model=ClockGetResponse)
def get_clock() -> ClockGetResponse:
    """
    Query market clock
    """
    pass


@app.get('/documents/{document_id}', response_model=None)
def get_documents_document_id(document_id: UUID) -> None:
    """
    Download a document file directly
    """
    pass


@app.get('/events/accounts/status', response_model=EventsAccountsStatusGetResponse)
def get_events_accounts_status(
    since: Optional[datetime] = None,
    until: Optional[datetime] = None,
    since_id: Optional[int] = None,
    until_id: Optional[int] = None,
) -> EventsAccountsStatusGetResponse:
    """
    Subscribe to account status events (SSE).
    """
    pass


@app.get('/events/journals/status', response_model=EventsJournalsStatusGetResponse)
def get_events_journals_status(
    since: Optional[datetime] = None,
    until: Optional[datetime] = None,
    since_id: Optional[int] = None,
    until_id: Optional[int] = None,
) -> EventsJournalsStatusGetResponse:
    """
    Subscribe to journal events (SSE).
    """
    pass


@app.get('/journals', response_model=List[JournalResource])
def get_journals(
    after: Optional[date] = None,
    before: Optional[date] = None,
    status: Optional[str] = None,
    entry_type: Optional[str] = None,
    to_account: Optional[UUID] = None,
    from_account: Optional[UUID] = None,
) -> List[JournalResource]:
    """
    Return a list of requested journals.
    """
    pass


@app.post('/journals', response_model=JournalResource)
def post_journals(body: JournalData) -> JournalResource:
    """
    Request a journal.
    """
    pass


@app.post('/journals/batch', response_model=List[BatchJournalResponse])
def post_journals_batch(body: BatchJournalRequest) -> List[BatchJournalResponse]:
    """
    Create a batch journal
    """
    pass


@app.delete('/journals/{journal_id}', response_model=None)
def delete_journal(journal_id: UUID) -> None:
    """
    Cancel a pending journal.
    """
    pass


@app.post('/oauth/authorize', response_model=OauthAuthorizePostResponse)
def post_oauth_authorize(body: OauthAuthorizePostRequest) -> OauthAuthorizePostResponse:
    """
    Issue a code.
    """
    pass


@app.get('/oauth/clients/{client_id}', response_model=OauthClientslientIdGetResponse)
def get_oauth_clients_client_id(
    client_id: UUID,
    response_type: Optional[str] = None,
    redirect_uri: Optional[str] = None,
    scope: Optional[str] = None,
) -> OauthClientslientIdGetResponse:
    """
    Returns an OAuth client.
    """
    pass


@app.post('/oauth/token', response_model=OauthTokenPostResponse)
def post_oauth_token(body: OauthTokenPostRequest) -> OauthTokenPostResponse:
    """
    Issue a token.
    """
    pass


@app.get(
    '/trading/accounts/{account_id}/account',
    response_model=TradingAccountsccountIaccountGetResponse,
)
def get_trading_account(account_id: UUID) -> TradingAccountsccountIaccountGetResponse:
    """
    Retrieve trading details for an account.
    """
    pass


@app.get('/trading/accounts/{account_id}/orders', response_model=List[OrderObject])
def get_orders(
    status: Optional[str] = None,
    limit: Optional[int] = None,
    after: Optional[datetime] = None,
    until: Optional[datetime] = None,
    direction: Optional[str] = None,
    nested: Optional[bool] = None,
    symbols: Optional[str] = None,
    account_id: UUID,
) -> List[OrderObject]:
    """
    Retrieves a list of orders for the account, filtered by the supplied query parameters.
    """
    pass


@app.post('/trading/accounts/{account_id}/orders', response_model=OrderObject)
def post_orders(account_id: UUID, body: CreateOrder = ...) -> OrderObject:
    """
    Create an order for an account.
    """
    pass


@app.delete(
    '/trading/accounts/{account_id}/orders',
    response_model=List[TradingAccountsccountIordersDeleteResponse],
)
def delete_orders(account_id: UUID) -> List[TradingAccountsccountIordersDeleteResponse]:
    """
    Attempts to cancel all open orders. A response will be provided for each order that is attempted to be cancelled.
    """
    pass


@app.get('/trading/accounts/{account_id}/orders/{order_id}', response_model=OrderObject)
def get_order(account_id: UUID, order_id: str = ...) -> OrderObject:
    """
    Retrieves a single order for the given order_id.
    """
    pass


@app.delete('/trading/accounts/{account_id}/orders/{order_id}', response_model=None)
def delete_order(account_id: UUID, order_id: str = ...) -> None:
    """
    Attempts to cancel an open order.
    """
    pass


@app.patch(
    '/trading/accounts/{account_id}/orders/{order_id}', response_model=OrderObject
)
def patch_order(
    account_id: UUID, order_id: str = ..., body: PatchOrder = ...
) -> OrderObject:
    """
    Replaces a single order with updated parameters. Each parameter overrides the corresponding attribute of the existing order.
    """
    pass


@app.get('/trading/accounts/{account_id}/positions', response_model=List[Position])
def get_positions(account_id: UUID) -> List[Position]:
    """
    List open positions for an account
    """
    pass
