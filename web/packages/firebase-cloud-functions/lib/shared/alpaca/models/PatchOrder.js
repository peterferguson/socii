"use strict";
/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchOrder = void 0;
class PatchOrder {
    "qty";
    "timeInForce";
    "limitPrice";
    "stopPrice";
    "trail";
    "clientOrderId";
    "createdAt";
    "updatedAt";
    static discriminator = undefined;
    static attributeTypeMap = [
        {
            name: "qty",
            baseName: "qty",
            type: "string",
            format: "decimal",
        },
        {
            name: "timeInForce",
            baseName: "time_in_force",
            type: "PatchOrderTimeInForceEnum",
            format: "",
        },
        {
            name: "limitPrice",
            baseName: "limit_price",
            type: "string",
            format: "decimal",
        },
        {
            name: "stopPrice",
            baseName: "stop_price",
            type: "string",
            format: "decimal",
        },
        {
            name: "trail",
            baseName: "trail",
            type: "string",
            format: "decimal",
        },
        {
            name: "clientOrderId",
            baseName: "client_order_id",
            type: "string",
            format: "",
        },
        {
            name: "createdAt",
            baseName: "created_at",
            type: "Date",
            format: "date-time",
        },
        {
            name: "updatedAt",
            baseName: "updated_at",
            type: "Date",
            format: "date-time",
        },
    ];
    static getAttributeTypeMap() {
        return PatchOrder.attributeTypeMap;
    }
    static from(json) {
        // - convert baseName to name
        if (json) {
            for (const { baseName, name } of this.attributeTypeMap) {
                if (baseName !== name && !(name in json)) {
                    Object.assign(json, { [name]: json[baseName] });
                    delete json[baseName];
                }
            }
        }
        return Object.assign(new this(), json);
    }
    constructor() { }
}
exports.PatchOrder = PatchOrder;
//# sourceMappingURL=PatchOrder.js.map