"use strict";
/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderObject = void 0;
class OrderObject {
    "id";
    "clientOrderId";
    "createdAt";
    "updatedAt";
    "submittedAt";
    "filledAt";
    "expiredAt";
    "canceledAt";
    "failedAt";
    "replacedAt";
    "replacedBy";
    "replaces";
    "assetId";
    "symbol";
    "assetClass";
    "notional";
    "qty";
    "filledQty";
    "filledAvgPrice";
    "orderClass";
    "orderType";
    "type";
    "side";
    "timeInForce";
    "limitPrice";
    "stopPrice";
    "status";
    "extendedHours";
    "legs";
    "trailPrice";
    "trailPercent";
    "hwm";
    "commission";
    static discriminator = undefined;
    static attributeTypeMap = [
        {
            name: "id",
            baseName: "id",
            type: "string",
            format: "uuid",
        },
        {
            name: "clientOrderId",
            baseName: "client_order_id",
            type: "string",
            format: "",
        },
        {
            name: "createdAt",
            baseName: "created_at",
            type: "Date",
            format: "date-time",
        },
        {
            name: "updatedAt",
            baseName: "updated_at",
            type: "Date",
            format: "date-time",
        },
        {
            name: "submittedAt",
            baseName: "submitted_at",
            type: "Date",
            format: "date-time",
        },
        {
            name: "filledAt",
            baseName: "filled_at",
            type: "Date",
            format: "date-time",
        },
        {
            name: "expiredAt",
            baseName: "expired_at",
            type: "Date",
            format: "date-time",
        },
        {
            name: "canceledAt",
            baseName: "canceled_at",
            type: "Date",
            format: "date-time",
        },
        {
            name: "failedAt",
            baseName: "failed_at",
            type: "Date",
            format: "date-time",
        },
        {
            name: "replacedAt",
            baseName: "replaced_at",
            type: "Date",
            format: "date-time",
        },
        {
            name: "replacedBy",
            baseName: "replaced_by",
            type: "string",
            format: "uuid",
        },
        {
            name: "replaces",
            baseName: "replaces",
            type: "string",
            format: "uuid",
        },
        {
            name: "assetId",
            baseName: "asset_id",
            type: "string",
            format: "uuid",
        },
        {
            name: "symbol",
            baseName: "symbol",
            type: "string",
            format: "",
        },
        {
            name: "assetClass",
            baseName: "asset_class",
            type: "string",
            format: "",
        },
        {
            name: "notional",
            baseName: "notional",
            type: "string",
            format: "decimal",
        },
        {
            name: "qty",
            baseName: "qty",
            type: "string",
            format: "decimal",
        },
        {
            name: "filledQty",
            baseName: "filled_qty",
            type: "string",
            format: "decimal",
        },
        {
            name: "filledAvgPrice",
            baseName: "filled_avg_price",
            type: "string",
            format: "decimal",
        },
        {
            name: "orderClass",
            baseName: "order_class",
            type: "OrderObjectOrderClassEnum",
            format: "",
        },
        {
            name: "orderType",
            baseName: "order_type",
            type: "OrderObjectOrderTypeEnum",
            format: "",
        },
        {
            name: "type",
            baseName: "type",
            type: "OrderObjectTypeEnum",
            format: "",
        },
        {
            name: "side",
            baseName: "side",
            type: "OrderObjectSideEnum",
            format: "",
        },
        {
            name: "timeInForce",
            baseName: "time_in_force",
            type: "OrderObjectTimeInForceEnum",
            format: "",
        },
        {
            name: "limitPrice",
            baseName: "limit_price",
            type: "string",
            format: "decimal",
        },
        {
            name: "stopPrice",
            baseName: "stop_price",
            type: "string",
            format: "decimal",
        },
        {
            name: "status",
            baseName: "status",
            type: "OrderObjectStatusEnum",
            format: "",
        },
        {
            name: "extendedHours",
            baseName: "extended_hours",
            type: "boolean",
            format: "",
        },
        {
            name: "legs",
            baseName: "legs",
            type: "Array<OrderObject>",
            format: "",
        },
        {
            name: "trailPrice",
            baseName: "trail_price",
            type: "string",
            format: "decimal",
        },
        {
            name: "trailPercent",
            baseName: "trail_percent",
            type: "string",
            format: "decimal",
        },
        {
            name: "hwm",
            baseName: "hwm",
            type: "string",
            format: "decimal",
        },
        {
            name: "commission",
            baseName: "commission",
            type: "string",
            format: "decimal",
        },
    ];
    static getAttributeTypeMap() {
        return OrderObject.attributeTypeMap;
    }
    static from(json) {
        // - convert baseName to name
        if (json) {
            for (const { baseName, name } of this.attributeTypeMap) {
                if (baseName !== name && !(name in json)) {
                    Object.assign(json, { [name]: json[baseName] });
                    delete json[baseName];
                }
            }
        }
        return Object.assign(new this(), json);
    }
    constructor() { }
}
exports.OrderObject = OrderObject;
//# sourceMappingURL=OrderObject.js.map