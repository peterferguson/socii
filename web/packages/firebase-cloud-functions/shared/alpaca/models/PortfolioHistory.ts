/**
 * Alpaca Broker API
 * Open brokerage accounts, enable commission-free trading, and manage the ongoing user experience with Alpaca Broker API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

export class PortfolioHistory {
  "timestamp"?: Array<number>
  /**
   * equity value of the account in dollar amount as of the end of each time window
   */
  "equity"?: Array<number>
  /**
   * profit/loss in dollar from the base value
   */
  "profitLoss"?: Array<number>
  /**
   * profit/loss in percentage from the base value
   */
  "profitLossPct"?: Array<number>
  /**
   * basis in dollar of the profit loss calculation
   */
  "baseValue"?: number
  /**
   * time window size of each data element
   */
  "timeframe"?: string

  static readonly discriminator: string | undefined = undefined

  static readonly attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
    format: string
  }> = [
    {
      name: "timestamp",
      baseName: "timestamp",
      type: "Array<number>",
      format: "",
    },
    {
      name: "equity",
      baseName: "equity",
      type: "Array<number>",
      format: "",
    },
    {
      name: "profitLoss",
      baseName: "profit_loss",
      type: "Array<number>",
      format: "",
    },
    {
      name: "profitLossPct",
      baseName: "profit_loss_pct",
      type: "Array<number>",
      format: "",
    },
    {
      name: "baseValue",
      baseName: "base_value",
      type: "number",
      format: "",
    },
    {
      name: "timeframe",
      baseName: "timeframe",
      type: "string",
      format: "",
    },
  ]

  static getAttributeTypeMap() {
    return PortfolioHistory.attributeTypeMap
  }

  static from(json) {
    // - convert baseName to name
    if (json) {
      for (const { baseName, name } of this.attributeTypeMap) {
        if (baseName !== name && !(name in json)) {
          Object.assign(json, { [name]: json[baseName] })
          delete json[baseName]
        }
      }
    }
    return Object.assign(new this(), json)
  }

  public constructor() {}
}
